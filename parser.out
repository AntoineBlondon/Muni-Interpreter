Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement SEMI statements
Rule 3     statements -> statement SEMI
Rule 4     statements -> statement statements
Rule 5     statements -> statement
Rule 6     function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
Rule 7     function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 8     parameters -> type_specifier IDENTIFIER COMMA parameters
Rule 9     parameters -> type_specifier IDENTIFIER
Rule 10    parameters -> <empty>
Rule 11    expression -> IDENTIFIER LPAREN arguments RPAREN
Rule 12    expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
Rule 13    arguments -> expression COMMA arguments
Rule 14    arguments -> expression
Rule 15    arguments -> <empty>
Rule 16    return_statement -> RETURN expression SEMI
Rule 17    statement -> declaration
Rule 18    statement -> assignment
Rule 19    statement -> function_declaration
Rule 20    statement -> expression
Rule 21    statement -> list_operation
Rule 22    statement -> return_statement
Rule 23    statement -> IMPORT expression AS IDENTIFIER
Rule 24    statement -> IMPORT expression
Rule 25    statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
Rule 26    statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE
Rule 27    statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
Rule 28    statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
Rule 29    statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE
Rule 30    statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
Rule 31    statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
Rule 32    case_statements -> CASE expression COLON statements case_statements
Rule 33    case_statements -> DEFAULT COLON statements
Rule 34    case_statements -> <empty>
Rule 35    statement -> BREAK SEMI
Rule 36    expression -> LBRACKET elements RBRACKET
Rule 37    expression -> LBRACKET RBRACKET
Rule 38    elements -> expression COMMA elements
Rule 39    elements -> expression
Rule 40    expression -> expression LBRACKET expression RBRACKET
Rule 41    list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
Rule 42    list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression
Rule 43    list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
Rule 44    expression -> IDENTIFIER AT expression
Rule 45    declaration -> type_specifier IDENTIFIER EQUALS expression
Rule 46    type_specifier -> INT
Rule 47    type_specifier -> FLOAT
Rule 48    type_specifier -> BOOL
Rule 49    type_specifier -> STR
Rule 50    type_specifier -> UNTYPED
Rule 51    type_specifier -> VOID
Rule 52    type_specifier -> LIST LT type_specifier GT
Rule 53    assignment -> IDENTIFIER EQUALS expression
Rule 54    assignment -> IDENTIFIER double_operation expression
Rule 55    double_operation -> PLUSEQ
Rule 56    double_operation -> MINUSEQ
Rule 57    double_operation -> MULEQ
Rule 58    double_operation -> DIVEQ
Rule 59    expression -> expression PLUS expression
Rule 60    expression -> expression MINUS expression
Rule 61    expression -> expression MUL expression
Rule 62    expression -> expression DIV expression
Rule 63    expression -> INTEGER_LITERAL
Rule 64    expression -> MINUS INTEGER_LITERAL
Rule 65    expression -> FLOAT_LITERAL
Rule 66    expression -> MINUS FLOAT_LITERAL
Rule 67    expression -> TRUE
Rule 68    expression -> FALSE
Rule 69    expression -> STRING_LITERAL
Rule 70    expression -> IDENTIFIER
Rule 71    expression -> expression GT expression
Rule 72    expression -> expression LT expression
Rule 73    expression -> expression EQ expression
Rule 74    expression -> expression GE expression
Rule 75    expression -> expression LE expression
Rule 76    expression -> expression NE expression
Rule 77    expression -> LPAREN expression RPAREN
Rule 78    expression -> expression RARROW type_specifier

Terminals, with rules where they appear

AS                   : 23
AT                   : 44
BOOL                 : 48
BREAK                : 35
CASE                 : 32
COLON                : 30 32 33
COMMA                : 8 13 38
DEFAULT              : 33
DIV                  : 62
DIVEQ                : 58
ELSE                 : 25
EQ                   : 73
EQUALS               : 6 41 45 53
FALSE                : 68
FLOAT                : 47
FLOAT_LITERAL        : 65 66
FOR                  : 27 28
GE                   : 74
GT                   : 52 71
IDENTIFIER           : 6 7 8 9 11 12 12 23 28 41 42 43 44 45 53 54 70
IF                   : 25 26
IMPORT               : 23 24
IN                   : 28
INT                  : 46
INTEGER_LITERAL      : 63 64
LARROW               : 42
LBRACE               : 6 7 25 25 26 27 28 29 30 31
LBRACKET             : 36 37 40 41 42 43
LE                   : 75
LIST                 : 52
LPAREN               : 6 7 11 12 25 26 27 28 29 30 31 77
LT                   : 52 72
MINUS                : 60 64 66
MINUSEQ              : 43 56
MUL                  : 61
MULEQ                : 57
NE                   : 76
PIPE                 : 12
PLUS                 : 59
PLUSEQ               : 55
RARROW               : 78
RBRACE               : 6 7 25 25 26 27 28 29 30 31
RBRACKET             : 36 37 40 41 42 43
RETURN               : 16
RPAREN               : 6 7 11 12 25 26 27 28 29 30 31 77
SEMI                 : 2 3 16 27 27 35
STR                  : 49
STRING_LITERAL       : 69
SWITCH               : 31
TRUE                 : 67
UNTYPED              : 50
VOID                 : 51
WHILE                : 29 30
error                : 

Nonterminals, with rules where they appear

arguments            : 11 12 13
assignment           : 18
case_statements      : 31 32
declaration          : 17
double_operation     : 54
elements             : 36 38
expression           : 6 13 14 16 20 23 24 25 26 27 28 29 30 30 31 32 38 39 40 40 41 41 42 42 43 44 45 53 54 59 59 60 60 61 61 62 62 71 71 72 72 73 73 74 74 75 75 76 76 77 78
function_declaration : 19
list_operation       : 21
parameters           : 6 7 8
program              : 0
return_statement     : 22
statement            : 2 3 4 5 27 27
statements           : 1 2 4 6 7 25 25 26 27 28 29 30 32 33
type_specifier       : 6 7 8 9 28 45 52 78

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement SEMI statements
    (3) statements -> . statement SEMI
    (4) statements -> . statement statements
    (5) statements -> . statement
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    expression                     shift and go to state 7
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9
    type_specifier                 shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .

    $end            reduce using rule 1 (program -> statements .)


state 3

    (2) statements -> statement . SEMI statements
    (3) statements -> statement . SEMI
    (4) statements -> statement . statements
    (5) statements -> statement .
    (2) statements -> . statement SEMI statements
    (3) statements -> . statement SEMI
    (4) statements -> . statement statements
    (5) statements -> . statement
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    SEMI            shift and go to state 34
    $end            reduce using rule 5 (statements -> statement .)
    RBRACE          reduce using rule 5 (statements -> statement .)
    CASE            reduce using rule 5 (statements -> statement .)
    DEFAULT         reduce using rule 5 (statements -> statement .)
    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    statement                      shift and go to state 3
    statements                     shift and go to state 35
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    expression                     shift and go to state 7
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9
    type_specifier                 shift and go to state 15

state 4

    (17) statement -> declaration .

    SEMI            reduce using rule 17 (statement -> declaration .)
    IMPORT          reduce using rule 17 (statement -> declaration .)
    IF              reduce using rule 17 (statement -> declaration .)
    FOR             reduce using rule 17 (statement -> declaration .)
    WHILE           reduce using rule 17 (statement -> declaration .)
    SWITCH          reduce using rule 17 (statement -> declaration .)
    BREAK           reduce using rule 17 (statement -> declaration .)
    IDENTIFIER      reduce using rule 17 (statement -> declaration .)
    LBRACKET        reduce using rule 17 (statement -> declaration .)
    INTEGER_LITERAL reduce using rule 17 (statement -> declaration .)
    MINUS           reduce using rule 17 (statement -> declaration .)
    FLOAT_LITERAL   reduce using rule 17 (statement -> declaration .)
    TRUE            reduce using rule 17 (statement -> declaration .)
    FALSE           reduce using rule 17 (statement -> declaration .)
    STRING_LITERAL  reduce using rule 17 (statement -> declaration .)
    LPAREN          reduce using rule 17 (statement -> declaration .)
    RETURN          reduce using rule 17 (statement -> declaration .)
    INT             reduce using rule 17 (statement -> declaration .)
    FLOAT           reduce using rule 17 (statement -> declaration .)
    BOOL            reduce using rule 17 (statement -> declaration .)
    STR             reduce using rule 17 (statement -> declaration .)
    UNTYPED         reduce using rule 17 (statement -> declaration .)
    VOID            reduce using rule 17 (statement -> declaration .)
    LIST            reduce using rule 17 (statement -> declaration .)
    $end            reduce using rule 17 (statement -> declaration .)
    RBRACE          reduce using rule 17 (statement -> declaration .)
    CASE            reduce using rule 17 (statement -> declaration .)
    DEFAULT         reduce using rule 17 (statement -> declaration .)
    RPAREN          reduce using rule 17 (statement -> declaration .)


state 5

    (18) statement -> assignment .

    SEMI            reduce using rule 18 (statement -> assignment .)
    IMPORT          reduce using rule 18 (statement -> assignment .)
    IF              reduce using rule 18 (statement -> assignment .)
    FOR             reduce using rule 18 (statement -> assignment .)
    WHILE           reduce using rule 18 (statement -> assignment .)
    SWITCH          reduce using rule 18 (statement -> assignment .)
    BREAK           reduce using rule 18 (statement -> assignment .)
    IDENTIFIER      reduce using rule 18 (statement -> assignment .)
    LBRACKET        reduce using rule 18 (statement -> assignment .)
    INTEGER_LITERAL reduce using rule 18 (statement -> assignment .)
    MINUS           reduce using rule 18 (statement -> assignment .)
    FLOAT_LITERAL   reduce using rule 18 (statement -> assignment .)
    TRUE            reduce using rule 18 (statement -> assignment .)
    FALSE           reduce using rule 18 (statement -> assignment .)
    STRING_LITERAL  reduce using rule 18 (statement -> assignment .)
    LPAREN          reduce using rule 18 (statement -> assignment .)
    RETURN          reduce using rule 18 (statement -> assignment .)
    INT             reduce using rule 18 (statement -> assignment .)
    FLOAT           reduce using rule 18 (statement -> assignment .)
    BOOL            reduce using rule 18 (statement -> assignment .)
    STR             reduce using rule 18 (statement -> assignment .)
    UNTYPED         reduce using rule 18 (statement -> assignment .)
    VOID            reduce using rule 18 (statement -> assignment .)
    LIST            reduce using rule 18 (statement -> assignment .)
    $end            reduce using rule 18 (statement -> assignment .)
    RBRACE          reduce using rule 18 (statement -> assignment .)
    CASE            reduce using rule 18 (statement -> assignment .)
    DEFAULT         reduce using rule 18 (statement -> assignment .)
    RPAREN          reduce using rule 18 (statement -> assignment .)


state 6

    (19) statement -> function_declaration .

    SEMI            reduce using rule 19 (statement -> function_declaration .)
    IMPORT          reduce using rule 19 (statement -> function_declaration .)
    IF              reduce using rule 19 (statement -> function_declaration .)
    FOR             reduce using rule 19 (statement -> function_declaration .)
    WHILE           reduce using rule 19 (statement -> function_declaration .)
    SWITCH          reduce using rule 19 (statement -> function_declaration .)
    BREAK           reduce using rule 19 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 19 (statement -> function_declaration .)
    LBRACKET        reduce using rule 19 (statement -> function_declaration .)
    INTEGER_LITERAL reduce using rule 19 (statement -> function_declaration .)
    MINUS           reduce using rule 19 (statement -> function_declaration .)
    FLOAT_LITERAL   reduce using rule 19 (statement -> function_declaration .)
    TRUE            reduce using rule 19 (statement -> function_declaration .)
    FALSE           reduce using rule 19 (statement -> function_declaration .)
    STRING_LITERAL  reduce using rule 19 (statement -> function_declaration .)
    LPAREN          reduce using rule 19 (statement -> function_declaration .)
    RETURN          reduce using rule 19 (statement -> function_declaration .)
    INT             reduce using rule 19 (statement -> function_declaration .)
    FLOAT           reduce using rule 19 (statement -> function_declaration .)
    BOOL            reduce using rule 19 (statement -> function_declaration .)
    STR             reduce using rule 19 (statement -> function_declaration .)
    UNTYPED         reduce using rule 19 (statement -> function_declaration .)
    VOID            reduce using rule 19 (statement -> function_declaration .)
    LIST            reduce using rule 19 (statement -> function_declaration .)
    $end            reduce using rule 19 (statement -> function_declaration .)
    RBRACE          reduce using rule 19 (statement -> function_declaration .)
    CASE            reduce using rule 19 (statement -> function_declaration .)
    DEFAULT         reduce using rule 19 (statement -> function_declaration .)
    RPAREN          reduce using rule 19 (statement -> function_declaration .)


state 7

    (20) statement -> expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMI            reduce using rule 20 (statement -> expression .)
    IMPORT          reduce using rule 20 (statement -> expression .)
    IF              reduce using rule 20 (statement -> expression .)
    FOR             reduce using rule 20 (statement -> expression .)
    WHILE           reduce using rule 20 (statement -> expression .)
    SWITCH          reduce using rule 20 (statement -> expression .)
    BREAK           reduce using rule 20 (statement -> expression .)
    IDENTIFIER      reduce using rule 20 (statement -> expression .)
    INTEGER_LITERAL reduce using rule 20 (statement -> expression .)
    FLOAT_LITERAL   reduce using rule 20 (statement -> expression .)
    TRUE            reduce using rule 20 (statement -> expression .)
    FALSE           reduce using rule 20 (statement -> expression .)
    STRING_LITERAL  reduce using rule 20 (statement -> expression .)
    LPAREN          reduce using rule 20 (statement -> expression .)
    RETURN          reduce using rule 20 (statement -> expression .)
    INT             reduce using rule 20 (statement -> expression .)
    FLOAT           reduce using rule 20 (statement -> expression .)
    BOOL            reduce using rule 20 (statement -> expression .)
    STR             reduce using rule 20 (statement -> expression .)
    UNTYPED         reduce using rule 20 (statement -> expression .)
    VOID            reduce using rule 20 (statement -> expression .)
    LIST            reduce using rule 20 (statement -> expression .)
    $end            reduce using rule 20 (statement -> expression .)
    RBRACE          reduce using rule 20 (statement -> expression .)
    CASE            reduce using rule 20 (statement -> expression .)
    DEFAULT         reduce using rule 20 (statement -> expression .)
    RPAREN          reduce using rule 20 (statement -> expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 20 (statement -> expression .) ]
  ! MINUS           [ reduce using rule 20 (statement -> expression .) ]


state 8

    (21) statement -> list_operation .

    SEMI            reduce using rule 21 (statement -> list_operation .)
    IMPORT          reduce using rule 21 (statement -> list_operation .)
    IF              reduce using rule 21 (statement -> list_operation .)
    FOR             reduce using rule 21 (statement -> list_operation .)
    WHILE           reduce using rule 21 (statement -> list_operation .)
    SWITCH          reduce using rule 21 (statement -> list_operation .)
    BREAK           reduce using rule 21 (statement -> list_operation .)
    IDENTIFIER      reduce using rule 21 (statement -> list_operation .)
    LBRACKET        reduce using rule 21 (statement -> list_operation .)
    INTEGER_LITERAL reduce using rule 21 (statement -> list_operation .)
    MINUS           reduce using rule 21 (statement -> list_operation .)
    FLOAT_LITERAL   reduce using rule 21 (statement -> list_operation .)
    TRUE            reduce using rule 21 (statement -> list_operation .)
    FALSE           reduce using rule 21 (statement -> list_operation .)
    STRING_LITERAL  reduce using rule 21 (statement -> list_operation .)
    LPAREN          reduce using rule 21 (statement -> list_operation .)
    RETURN          reduce using rule 21 (statement -> list_operation .)
    INT             reduce using rule 21 (statement -> list_operation .)
    FLOAT           reduce using rule 21 (statement -> list_operation .)
    BOOL            reduce using rule 21 (statement -> list_operation .)
    STR             reduce using rule 21 (statement -> list_operation .)
    UNTYPED         reduce using rule 21 (statement -> list_operation .)
    VOID            reduce using rule 21 (statement -> list_operation .)
    LIST            reduce using rule 21 (statement -> list_operation .)
    $end            reduce using rule 21 (statement -> list_operation .)
    RBRACE          reduce using rule 21 (statement -> list_operation .)
    CASE            reduce using rule 21 (statement -> list_operation .)
    DEFAULT         reduce using rule 21 (statement -> list_operation .)
    RPAREN          reduce using rule 21 (statement -> list_operation .)


state 9

    (22) statement -> return_statement .

    SEMI            reduce using rule 22 (statement -> return_statement .)
    IMPORT          reduce using rule 22 (statement -> return_statement .)
    IF              reduce using rule 22 (statement -> return_statement .)
    FOR             reduce using rule 22 (statement -> return_statement .)
    WHILE           reduce using rule 22 (statement -> return_statement .)
    SWITCH          reduce using rule 22 (statement -> return_statement .)
    BREAK           reduce using rule 22 (statement -> return_statement .)
    IDENTIFIER      reduce using rule 22 (statement -> return_statement .)
    LBRACKET        reduce using rule 22 (statement -> return_statement .)
    INTEGER_LITERAL reduce using rule 22 (statement -> return_statement .)
    MINUS           reduce using rule 22 (statement -> return_statement .)
    FLOAT_LITERAL   reduce using rule 22 (statement -> return_statement .)
    TRUE            reduce using rule 22 (statement -> return_statement .)
    FALSE           reduce using rule 22 (statement -> return_statement .)
    STRING_LITERAL  reduce using rule 22 (statement -> return_statement .)
    LPAREN          reduce using rule 22 (statement -> return_statement .)
    RETURN          reduce using rule 22 (statement -> return_statement .)
    INT             reduce using rule 22 (statement -> return_statement .)
    FLOAT           reduce using rule 22 (statement -> return_statement .)
    BOOL            reduce using rule 22 (statement -> return_statement .)
    STR             reduce using rule 22 (statement -> return_statement .)
    UNTYPED         reduce using rule 22 (statement -> return_statement .)
    VOID            reduce using rule 22 (statement -> return_statement .)
    LIST            reduce using rule 22 (statement -> return_statement .)
    $end            reduce using rule 22 (statement -> return_statement .)
    RBRACE          reduce using rule 22 (statement -> return_statement .)
    CASE            reduce using rule 22 (statement -> return_statement .)
    DEFAULT         reduce using rule 22 (statement -> return_statement .)
    RPAREN          reduce using rule 22 (statement -> return_statement .)


state 10

    (23) statement -> IMPORT . expression AS IDENTIFIER
    (24) statement -> IMPORT . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 48

state 11

    (53) assignment -> IDENTIFIER . EQUALS expression
    (54) assignment -> IDENTIFIER . double_operation expression
    (11) expression -> IDENTIFIER . LPAREN arguments RPAREN
    (12) expression -> IDENTIFIER . PIPE IDENTIFIER LPAREN arguments RPAREN
    (44) expression -> IDENTIFIER . AT expression
    (70) expression -> IDENTIFIER .
    (41) list_operation -> IDENTIFIER . LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> IDENTIFIER . LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> IDENTIFIER . MINUSEQ LBRACKET expression RBRACKET
    (55) double_operation -> . PLUSEQ
    (56) double_operation -> . MINUSEQ
    (57) double_operation -> . MULEQ
    (58) double_operation -> . DIVEQ

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    EQUALS          shift and go to state 50
    LPAREN          shift and go to state 52
    PIPE            shift and go to state 53
    AT              shift and go to state 54
    PLUS            reduce using rule 70 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 70 (expression -> IDENTIFIER .)
    MUL             reduce using rule 70 (expression -> IDENTIFIER .)
    DIV             reduce using rule 70 (expression -> IDENTIFIER .)
    GT              reduce using rule 70 (expression -> IDENTIFIER .)
    LT              reduce using rule 70 (expression -> IDENTIFIER .)
    EQ              reduce using rule 70 (expression -> IDENTIFIER .)
    GE              reduce using rule 70 (expression -> IDENTIFIER .)
    LE              reduce using rule 70 (expression -> IDENTIFIER .)
    NE              reduce using rule 70 (expression -> IDENTIFIER .)
    RARROW          reduce using rule 70 (expression -> IDENTIFIER .)
    SEMI            reduce using rule 70 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 70 (expression -> IDENTIFIER .)
    IF              reduce using rule 70 (expression -> IDENTIFIER .)
    FOR             reduce using rule 70 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 70 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 70 (expression -> IDENTIFIER .)
    BREAK           reduce using rule 70 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 70 (expression -> IDENTIFIER .)
    INTEGER_LITERAL reduce using rule 70 (expression -> IDENTIFIER .)
    FLOAT_LITERAL   reduce using rule 70 (expression -> IDENTIFIER .)
    TRUE            reduce using rule 70 (expression -> IDENTIFIER .)
    FALSE           reduce using rule 70 (expression -> IDENTIFIER .)
    STRING_LITERAL  reduce using rule 70 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 70 (expression -> IDENTIFIER .)
    INT             reduce using rule 70 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 70 (expression -> IDENTIFIER .)
    BOOL            reduce using rule 70 (expression -> IDENTIFIER .)
    STR             reduce using rule 70 (expression -> IDENTIFIER .)
    UNTYPED         reduce using rule 70 (expression -> IDENTIFIER .)
    VOID            reduce using rule 70 (expression -> IDENTIFIER .)
    LIST            reduce using rule 70 (expression -> IDENTIFIER .)
    $end            reduce using rule 70 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 70 (expression -> IDENTIFIER .)
    CASE            reduce using rule 70 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 70 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 70 (expression -> IDENTIFIER .)
    LBRACKET        shift and go to state 55
    MINUSEQ         shift and go to state 56
    PLUSEQ          shift and go to state 57
    MULEQ           shift and go to state 58
    DIVEQ           shift and go to state 59

  ! LBRACKET        [ reduce using rule 70 (expression -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 70 (expression -> IDENTIFIER .) ]

    double_operation               shift and go to state 51

state 12

    (25) statement -> IF . LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> IF . LPAREN expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 60


state 13

    (77) expression -> LPAREN . expression RPAREN
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 61

state 14

    (27) statement -> FOR . LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> FOR . LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 62


state 15

    (45) declaration -> type_specifier . IDENTIFIER EQUALS expression
    (6) function_declaration -> type_specifier . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> type_specifier . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 63


state 16

    (29) statement -> WHILE . LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> WHILE . LPAREN expression RPAREN COLON expression LBRACE statements RBRACE

    LPAREN          shift and go to state 64


state 17

    (31) statement -> SWITCH . LPAREN expression RPAREN LBRACE case_statements RBRACE

    LPAREN          shift and go to state 65


state 18

    (35) statement -> BREAK . SEMI

    SEMI            shift and go to state 66


state 19

    (36) expression -> LBRACKET . elements RBRACKET
    (37) expression -> LBRACKET . RBRACKET
    (38) elements -> . expression COMMA elements
    (39) elements -> . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    RBRACKET        shift and go to state 68
    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    elements                       shift and go to state 67
    expression                     shift and go to state 69

state 20

    (64) expression -> MINUS . INTEGER_LITERAL
    (66) expression -> MINUS . FLOAT_LITERAL

    INTEGER_LITERAL shift and go to state 70
    FLOAT_LITERAL   shift and go to state 71


state 21

    (63) expression -> INTEGER_LITERAL .

    LBRACKET        reduce using rule 63 (expression -> INTEGER_LITERAL .)
    PLUS            reduce using rule 63 (expression -> INTEGER_LITERAL .)
    MINUS           reduce using rule 63 (expression -> INTEGER_LITERAL .)
    MUL             reduce using rule 63 (expression -> INTEGER_LITERAL .)
    DIV             reduce using rule 63 (expression -> INTEGER_LITERAL .)
    GT              reduce using rule 63 (expression -> INTEGER_LITERAL .)
    LT              reduce using rule 63 (expression -> INTEGER_LITERAL .)
    EQ              reduce using rule 63 (expression -> INTEGER_LITERAL .)
    GE              reduce using rule 63 (expression -> INTEGER_LITERAL .)
    LE              reduce using rule 63 (expression -> INTEGER_LITERAL .)
    NE              reduce using rule 63 (expression -> INTEGER_LITERAL .)
    RARROW          reduce using rule 63 (expression -> INTEGER_LITERAL .)
    SEMI            reduce using rule 63 (expression -> INTEGER_LITERAL .)
    IMPORT          reduce using rule 63 (expression -> INTEGER_LITERAL .)
    IF              reduce using rule 63 (expression -> INTEGER_LITERAL .)
    FOR             reduce using rule 63 (expression -> INTEGER_LITERAL .)
    WHILE           reduce using rule 63 (expression -> INTEGER_LITERAL .)
    SWITCH          reduce using rule 63 (expression -> INTEGER_LITERAL .)
    BREAK           reduce using rule 63 (expression -> INTEGER_LITERAL .)
    IDENTIFIER      reduce using rule 63 (expression -> INTEGER_LITERAL .)
    INTEGER_LITERAL reduce using rule 63 (expression -> INTEGER_LITERAL .)
    FLOAT_LITERAL   reduce using rule 63 (expression -> INTEGER_LITERAL .)
    TRUE            reduce using rule 63 (expression -> INTEGER_LITERAL .)
    FALSE           reduce using rule 63 (expression -> INTEGER_LITERAL .)
    STRING_LITERAL  reduce using rule 63 (expression -> INTEGER_LITERAL .)
    LPAREN          reduce using rule 63 (expression -> INTEGER_LITERAL .)
    RETURN          reduce using rule 63 (expression -> INTEGER_LITERAL .)
    INT             reduce using rule 63 (expression -> INTEGER_LITERAL .)
    FLOAT           reduce using rule 63 (expression -> INTEGER_LITERAL .)
    BOOL            reduce using rule 63 (expression -> INTEGER_LITERAL .)
    STR             reduce using rule 63 (expression -> INTEGER_LITERAL .)
    UNTYPED         reduce using rule 63 (expression -> INTEGER_LITERAL .)
    VOID            reduce using rule 63 (expression -> INTEGER_LITERAL .)
    LIST            reduce using rule 63 (expression -> INTEGER_LITERAL .)
    $end            reduce using rule 63 (expression -> INTEGER_LITERAL .)
    RBRACE          reduce using rule 63 (expression -> INTEGER_LITERAL .)
    CASE            reduce using rule 63 (expression -> INTEGER_LITERAL .)
    DEFAULT         reduce using rule 63 (expression -> INTEGER_LITERAL .)
    AS              reduce using rule 63 (expression -> INTEGER_LITERAL .)
    RPAREN          reduce using rule 63 (expression -> INTEGER_LITERAL .)
    COMMA           reduce using rule 63 (expression -> INTEGER_LITERAL .)
    RBRACKET        reduce using rule 63 (expression -> INTEGER_LITERAL .)
    LBRACE          reduce using rule 63 (expression -> INTEGER_LITERAL .)
    COLON           reduce using rule 63 (expression -> INTEGER_LITERAL .)


state 22

    (65) expression -> FLOAT_LITERAL .

    LBRACKET        reduce using rule 65 (expression -> FLOAT_LITERAL .)
    PLUS            reduce using rule 65 (expression -> FLOAT_LITERAL .)
    MINUS           reduce using rule 65 (expression -> FLOAT_LITERAL .)
    MUL             reduce using rule 65 (expression -> FLOAT_LITERAL .)
    DIV             reduce using rule 65 (expression -> FLOAT_LITERAL .)
    GT              reduce using rule 65 (expression -> FLOAT_LITERAL .)
    LT              reduce using rule 65 (expression -> FLOAT_LITERAL .)
    EQ              reduce using rule 65 (expression -> FLOAT_LITERAL .)
    GE              reduce using rule 65 (expression -> FLOAT_LITERAL .)
    LE              reduce using rule 65 (expression -> FLOAT_LITERAL .)
    NE              reduce using rule 65 (expression -> FLOAT_LITERAL .)
    RARROW          reduce using rule 65 (expression -> FLOAT_LITERAL .)
    SEMI            reduce using rule 65 (expression -> FLOAT_LITERAL .)
    IMPORT          reduce using rule 65 (expression -> FLOAT_LITERAL .)
    IF              reduce using rule 65 (expression -> FLOAT_LITERAL .)
    FOR             reduce using rule 65 (expression -> FLOAT_LITERAL .)
    WHILE           reduce using rule 65 (expression -> FLOAT_LITERAL .)
    SWITCH          reduce using rule 65 (expression -> FLOAT_LITERAL .)
    BREAK           reduce using rule 65 (expression -> FLOAT_LITERAL .)
    IDENTIFIER      reduce using rule 65 (expression -> FLOAT_LITERAL .)
    INTEGER_LITERAL reduce using rule 65 (expression -> FLOAT_LITERAL .)
    FLOAT_LITERAL   reduce using rule 65 (expression -> FLOAT_LITERAL .)
    TRUE            reduce using rule 65 (expression -> FLOAT_LITERAL .)
    FALSE           reduce using rule 65 (expression -> FLOAT_LITERAL .)
    STRING_LITERAL  reduce using rule 65 (expression -> FLOAT_LITERAL .)
    LPAREN          reduce using rule 65 (expression -> FLOAT_LITERAL .)
    RETURN          reduce using rule 65 (expression -> FLOAT_LITERAL .)
    INT             reduce using rule 65 (expression -> FLOAT_LITERAL .)
    FLOAT           reduce using rule 65 (expression -> FLOAT_LITERAL .)
    BOOL            reduce using rule 65 (expression -> FLOAT_LITERAL .)
    STR             reduce using rule 65 (expression -> FLOAT_LITERAL .)
    UNTYPED         reduce using rule 65 (expression -> FLOAT_LITERAL .)
    VOID            reduce using rule 65 (expression -> FLOAT_LITERAL .)
    LIST            reduce using rule 65 (expression -> FLOAT_LITERAL .)
    $end            reduce using rule 65 (expression -> FLOAT_LITERAL .)
    RBRACE          reduce using rule 65 (expression -> FLOAT_LITERAL .)
    CASE            reduce using rule 65 (expression -> FLOAT_LITERAL .)
    DEFAULT         reduce using rule 65 (expression -> FLOAT_LITERAL .)
    AS              reduce using rule 65 (expression -> FLOAT_LITERAL .)
    RPAREN          reduce using rule 65 (expression -> FLOAT_LITERAL .)
    COMMA           reduce using rule 65 (expression -> FLOAT_LITERAL .)
    RBRACKET        reduce using rule 65 (expression -> FLOAT_LITERAL .)
    LBRACE          reduce using rule 65 (expression -> FLOAT_LITERAL .)
    COLON           reduce using rule 65 (expression -> FLOAT_LITERAL .)


state 23

    (67) expression -> TRUE .

    LBRACKET        reduce using rule 67 (expression -> TRUE .)
    PLUS            reduce using rule 67 (expression -> TRUE .)
    MINUS           reduce using rule 67 (expression -> TRUE .)
    MUL             reduce using rule 67 (expression -> TRUE .)
    DIV             reduce using rule 67 (expression -> TRUE .)
    GT              reduce using rule 67 (expression -> TRUE .)
    LT              reduce using rule 67 (expression -> TRUE .)
    EQ              reduce using rule 67 (expression -> TRUE .)
    GE              reduce using rule 67 (expression -> TRUE .)
    LE              reduce using rule 67 (expression -> TRUE .)
    NE              reduce using rule 67 (expression -> TRUE .)
    RARROW          reduce using rule 67 (expression -> TRUE .)
    SEMI            reduce using rule 67 (expression -> TRUE .)
    IMPORT          reduce using rule 67 (expression -> TRUE .)
    IF              reduce using rule 67 (expression -> TRUE .)
    FOR             reduce using rule 67 (expression -> TRUE .)
    WHILE           reduce using rule 67 (expression -> TRUE .)
    SWITCH          reduce using rule 67 (expression -> TRUE .)
    BREAK           reduce using rule 67 (expression -> TRUE .)
    IDENTIFIER      reduce using rule 67 (expression -> TRUE .)
    INTEGER_LITERAL reduce using rule 67 (expression -> TRUE .)
    FLOAT_LITERAL   reduce using rule 67 (expression -> TRUE .)
    TRUE            reduce using rule 67 (expression -> TRUE .)
    FALSE           reduce using rule 67 (expression -> TRUE .)
    STRING_LITERAL  reduce using rule 67 (expression -> TRUE .)
    LPAREN          reduce using rule 67 (expression -> TRUE .)
    RETURN          reduce using rule 67 (expression -> TRUE .)
    INT             reduce using rule 67 (expression -> TRUE .)
    FLOAT           reduce using rule 67 (expression -> TRUE .)
    BOOL            reduce using rule 67 (expression -> TRUE .)
    STR             reduce using rule 67 (expression -> TRUE .)
    UNTYPED         reduce using rule 67 (expression -> TRUE .)
    VOID            reduce using rule 67 (expression -> TRUE .)
    LIST            reduce using rule 67 (expression -> TRUE .)
    $end            reduce using rule 67 (expression -> TRUE .)
    RBRACE          reduce using rule 67 (expression -> TRUE .)
    CASE            reduce using rule 67 (expression -> TRUE .)
    DEFAULT         reduce using rule 67 (expression -> TRUE .)
    AS              reduce using rule 67 (expression -> TRUE .)
    RPAREN          reduce using rule 67 (expression -> TRUE .)
    COMMA           reduce using rule 67 (expression -> TRUE .)
    RBRACKET        reduce using rule 67 (expression -> TRUE .)
    LBRACE          reduce using rule 67 (expression -> TRUE .)
    COLON           reduce using rule 67 (expression -> TRUE .)


state 24

    (68) expression -> FALSE .

    LBRACKET        reduce using rule 68 (expression -> FALSE .)
    PLUS            reduce using rule 68 (expression -> FALSE .)
    MINUS           reduce using rule 68 (expression -> FALSE .)
    MUL             reduce using rule 68 (expression -> FALSE .)
    DIV             reduce using rule 68 (expression -> FALSE .)
    GT              reduce using rule 68 (expression -> FALSE .)
    LT              reduce using rule 68 (expression -> FALSE .)
    EQ              reduce using rule 68 (expression -> FALSE .)
    GE              reduce using rule 68 (expression -> FALSE .)
    LE              reduce using rule 68 (expression -> FALSE .)
    NE              reduce using rule 68 (expression -> FALSE .)
    RARROW          reduce using rule 68 (expression -> FALSE .)
    SEMI            reduce using rule 68 (expression -> FALSE .)
    IMPORT          reduce using rule 68 (expression -> FALSE .)
    IF              reduce using rule 68 (expression -> FALSE .)
    FOR             reduce using rule 68 (expression -> FALSE .)
    WHILE           reduce using rule 68 (expression -> FALSE .)
    SWITCH          reduce using rule 68 (expression -> FALSE .)
    BREAK           reduce using rule 68 (expression -> FALSE .)
    IDENTIFIER      reduce using rule 68 (expression -> FALSE .)
    INTEGER_LITERAL reduce using rule 68 (expression -> FALSE .)
    FLOAT_LITERAL   reduce using rule 68 (expression -> FALSE .)
    TRUE            reduce using rule 68 (expression -> FALSE .)
    FALSE           reduce using rule 68 (expression -> FALSE .)
    STRING_LITERAL  reduce using rule 68 (expression -> FALSE .)
    LPAREN          reduce using rule 68 (expression -> FALSE .)
    RETURN          reduce using rule 68 (expression -> FALSE .)
    INT             reduce using rule 68 (expression -> FALSE .)
    FLOAT           reduce using rule 68 (expression -> FALSE .)
    BOOL            reduce using rule 68 (expression -> FALSE .)
    STR             reduce using rule 68 (expression -> FALSE .)
    UNTYPED         reduce using rule 68 (expression -> FALSE .)
    VOID            reduce using rule 68 (expression -> FALSE .)
    LIST            reduce using rule 68 (expression -> FALSE .)
    $end            reduce using rule 68 (expression -> FALSE .)
    RBRACE          reduce using rule 68 (expression -> FALSE .)
    CASE            reduce using rule 68 (expression -> FALSE .)
    DEFAULT         reduce using rule 68 (expression -> FALSE .)
    AS              reduce using rule 68 (expression -> FALSE .)
    RPAREN          reduce using rule 68 (expression -> FALSE .)
    COMMA           reduce using rule 68 (expression -> FALSE .)
    RBRACKET        reduce using rule 68 (expression -> FALSE .)
    LBRACE          reduce using rule 68 (expression -> FALSE .)
    COLON           reduce using rule 68 (expression -> FALSE .)


state 25

    (69) expression -> STRING_LITERAL .

    LBRACKET        reduce using rule 69 (expression -> STRING_LITERAL .)
    PLUS            reduce using rule 69 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 69 (expression -> STRING_LITERAL .)
    MUL             reduce using rule 69 (expression -> STRING_LITERAL .)
    DIV             reduce using rule 69 (expression -> STRING_LITERAL .)
    GT              reduce using rule 69 (expression -> STRING_LITERAL .)
    LT              reduce using rule 69 (expression -> STRING_LITERAL .)
    EQ              reduce using rule 69 (expression -> STRING_LITERAL .)
    GE              reduce using rule 69 (expression -> STRING_LITERAL .)
    LE              reduce using rule 69 (expression -> STRING_LITERAL .)
    NE              reduce using rule 69 (expression -> STRING_LITERAL .)
    RARROW          reduce using rule 69 (expression -> STRING_LITERAL .)
    SEMI            reduce using rule 69 (expression -> STRING_LITERAL .)
    IMPORT          reduce using rule 69 (expression -> STRING_LITERAL .)
    IF              reduce using rule 69 (expression -> STRING_LITERAL .)
    FOR             reduce using rule 69 (expression -> STRING_LITERAL .)
    WHILE           reduce using rule 69 (expression -> STRING_LITERAL .)
    SWITCH          reduce using rule 69 (expression -> STRING_LITERAL .)
    BREAK           reduce using rule 69 (expression -> STRING_LITERAL .)
    IDENTIFIER      reduce using rule 69 (expression -> STRING_LITERAL .)
    INTEGER_LITERAL reduce using rule 69 (expression -> STRING_LITERAL .)
    FLOAT_LITERAL   reduce using rule 69 (expression -> STRING_LITERAL .)
    TRUE            reduce using rule 69 (expression -> STRING_LITERAL .)
    FALSE           reduce using rule 69 (expression -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 69 (expression -> STRING_LITERAL .)
    LPAREN          reduce using rule 69 (expression -> STRING_LITERAL .)
    RETURN          reduce using rule 69 (expression -> STRING_LITERAL .)
    INT             reduce using rule 69 (expression -> STRING_LITERAL .)
    FLOAT           reduce using rule 69 (expression -> STRING_LITERAL .)
    BOOL            reduce using rule 69 (expression -> STRING_LITERAL .)
    STR             reduce using rule 69 (expression -> STRING_LITERAL .)
    UNTYPED         reduce using rule 69 (expression -> STRING_LITERAL .)
    VOID            reduce using rule 69 (expression -> STRING_LITERAL .)
    LIST            reduce using rule 69 (expression -> STRING_LITERAL .)
    $end            reduce using rule 69 (expression -> STRING_LITERAL .)
    RBRACE          reduce using rule 69 (expression -> STRING_LITERAL .)
    CASE            reduce using rule 69 (expression -> STRING_LITERAL .)
    DEFAULT         reduce using rule 69 (expression -> STRING_LITERAL .)
    AS              reduce using rule 69 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 69 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 69 (expression -> STRING_LITERAL .)
    RBRACKET        reduce using rule 69 (expression -> STRING_LITERAL .)
    LBRACE          reduce using rule 69 (expression -> STRING_LITERAL .)
    COLON           reduce using rule 69 (expression -> STRING_LITERAL .)


state 26

    (16) return_statement -> RETURN . expression SEMI
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 72

state 27

    (46) type_specifier -> INT .

    IDENTIFIER      reduce using rule 46 (type_specifier -> INT .)
    LBRACKET        reduce using rule 46 (type_specifier -> INT .)
    PLUS            reduce using rule 46 (type_specifier -> INT .)
    MINUS           reduce using rule 46 (type_specifier -> INT .)
    MUL             reduce using rule 46 (type_specifier -> INT .)
    DIV             reduce using rule 46 (type_specifier -> INT .)
    GT              reduce using rule 46 (type_specifier -> INT .)
    LT              reduce using rule 46 (type_specifier -> INT .)
    EQ              reduce using rule 46 (type_specifier -> INT .)
    GE              reduce using rule 46 (type_specifier -> INT .)
    LE              reduce using rule 46 (type_specifier -> INT .)
    NE              reduce using rule 46 (type_specifier -> INT .)
    RARROW          reduce using rule 46 (type_specifier -> INT .)
    SEMI            reduce using rule 46 (type_specifier -> INT .)
    IMPORT          reduce using rule 46 (type_specifier -> INT .)
    IF              reduce using rule 46 (type_specifier -> INT .)
    FOR             reduce using rule 46 (type_specifier -> INT .)
    WHILE           reduce using rule 46 (type_specifier -> INT .)
    SWITCH          reduce using rule 46 (type_specifier -> INT .)
    BREAK           reduce using rule 46 (type_specifier -> INT .)
    INTEGER_LITERAL reduce using rule 46 (type_specifier -> INT .)
    FLOAT_LITERAL   reduce using rule 46 (type_specifier -> INT .)
    TRUE            reduce using rule 46 (type_specifier -> INT .)
    FALSE           reduce using rule 46 (type_specifier -> INT .)
    STRING_LITERAL  reduce using rule 46 (type_specifier -> INT .)
    LPAREN          reduce using rule 46 (type_specifier -> INT .)
    RETURN          reduce using rule 46 (type_specifier -> INT .)
    INT             reduce using rule 46 (type_specifier -> INT .)
    FLOAT           reduce using rule 46 (type_specifier -> INT .)
    BOOL            reduce using rule 46 (type_specifier -> INT .)
    STR             reduce using rule 46 (type_specifier -> INT .)
    UNTYPED         reduce using rule 46 (type_specifier -> INT .)
    VOID            reduce using rule 46 (type_specifier -> INT .)
    LIST            reduce using rule 46 (type_specifier -> INT .)
    $end            reduce using rule 46 (type_specifier -> INT .)
    RBRACE          reduce using rule 46 (type_specifier -> INT .)
    CASE            reduce using rule 46 (type_specifier -> INT .)
    DEFAULT         reduce using rule 46 (type_specifier -> INT .)
    AS              reduce using rule 46 (type_specifier -> INT .)
    RPAREN          reduce using rule 46 (type_specifier -> INT .)
    COMMA           reduce using rule 46 (type_specifier -> INT .)
    RBRACKET        reduce using rule 46 (type_specifier -> INT .)
    LBRACE          reduce using rule 46 (type_specifier -> INT .)
    COLON           reduce using rule 46 (type_specifier -> INT .)


state 28

    (47) type_specifier -> FLOAT .

    IDENTIFIER      reduce using rule 47 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 47 (type_specifier -> FLOAT .)
    PLUS            reduce using rule 47 (type_specifier -> FLOAT .)
    MINUS           reduce using rule 47 (type_specifier -> FLOAT .)
    MUL             reduce using rule 47 (type_specifier -> FLOAT .)
    DIV             reduce using rule 47 (type_specifier -> FLOAT .)
    GT              reduce using rule 47 (type_specifier -> FLOAT .)
    LT              reduce using rule 47 (type_specifier -> FLOAT .)
    EQ              reduce using rule 47 (type_specifier -> FLOAT .)
    GE              reduce using rule 47 (type_specifier -> FLOAT .)
    LE              reduce using rule 47 (type_specifier -> FLOAT .)
    NE              reduce using rule 47 (type_specifier -> FLOAT .)
    RARROW          reduce using rule 47 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 47 (type_specifier -> FLOAT .)
    IMPORT          reduce using rule 47 (type_specifier -> FLOAT .)
    IF              reduce using rule 47 (type_specifier -> FLOAT .)
    FOR             reduce using rule 47 (type_specifier -> FLOAT .)
    WHILE           reduce using rule 47 (type_specifier -> FLOAT .)
    SWITCH          reduce using rule 47 (type_specifier -> FLOAT .)
    BREAK           reduce using rule 47 (type_specifier -> FLOAT .)
    INTEGER_LITERAL reduce using rule 47 (type_specifier -> FLOAT .)
    FLOAT_LITERAL   reduce using rule 47 (type_specifier -> FLOAT .)
    TRUE            reduce using rule 47 (type_specifier -> FLOAT .)
    FALSE           reduce using rule 47 (type_specifier -> FLOAT .)
    STRING_LITERAL  reduce using rule 47 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 47 (type_specifier -> FLOAT .)
    RETURN          reduce using rule 47 (type_specifier -> FLOAT .)
    INT             reduce using rule 47 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 47 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 47 (type_specifier -> FLOAT .)
    STR             reduce using rule 47 (type_specifier -> FLOAT .)
    UNTYPED         reduce using rule 47 (type_specifier -> FLOAT .)
    VOID            reduce using rule 47 (type_specifier -> FLOAT .)
    LIST            reduce using rule 47 (type_specifier -> FLOAT .)
    $end            reduce using rule 47 (type_specifier -> FLOAT .)
    RBRACE          reduce using rule 47 (type_specifier -> FLOAT .)
    CASE            reduce using rule 47 (type_specifier -> FLOAT .)
    DEFAULT         reduce using rule 47 (type_specifier -> FLOAT .)
    AS              reduce using rule 47 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 47 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 47 (type_specifier -> FLOAT .)
    RBRACKET        reduce using rule 47 (type_specifier -> FLOAT .)
    LBRACE          reduce using rule 47 (type_specifier -> FLOAT .)
    COLON           reduce using rule 47 (type_specifier -> FLOAT .)


state 29

    (48) type_specifier -> BOOL .

    IDENTIFIER      reduce using rule 48 (type_specifier -> BOOL .)
    LBRACKET        reduce using rule 48 (type_specifier -> BOOL .)
    PLUS            reduce using rule 48 (type_specifier -> BOOL .)
    MINUS           reduce using rule 48 (type_specifier -> BOOL .)
    MUL             reduce using rule 48 (type_specifier -> BOOL .)
    DIV             reduce using rule 48 (type_specifier -> BOOL .)
    GT              reduce using rule 48 (type_specifier -> BOOL .)
    LT              reduce using rule 48 (type_specifier -> BOOL .)
    EQ              reduce using rule 48 (type_specifier -> BOOL .)
    GE              reduce using rule 48 (type_specifier -> BOOL .)
    LE              reduce using rule 48 (type_specifier -> BOOL .)
    NE              reduce using rule 48 (type_specifier -> BOOL .)
    RARROW          reduce using rule 48 (type_specifier -> BOOL .)
    SEMI            reduce using rule 48 (type_specifier -> BOOL .)
    IMPORT          reduce using rule 48 (type_specifier -> BOOL .)
    IF              reduce using rule 48 (type_specifier -> BOOL .)
    FOR             reduce using rule 48 (type_specifier -> BOOL .)
    WHILE           reduce using rule 48 (type_specifier -> BOOL .)
    SWITCH          reduce using rule 48 (type_specifier -> BOOL .)
    BREAK           reduce using rule 48 (type_specifier -> BOOL .)
    INTEGER_LITERAL reduce using rule 48 (type_specifier -> BOOL .)
    FLOAT_LITERAL   reduce using rule 48 (type_specifier -> BOOL .)
    TRUE            reduce using rule 48 (type_specifier -> BOOL .)
    FALSE           reduce using rule 48 (type_specifier -> BOOL .)
    STRING_LITERAL  reduce using rule 48 (type_specifier -> BOOL .)
    LPAREN          reduce using rule 48 (type_specifier -> BOOL .)
    RETURN          reduce using rule 48 (type_specifier -> BOOL .)
    INT             reduce using rule 48 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 48 (type_specifier -> BOOL .)
    BOOL            reduce using rule 48 (type_specifier -> BOOL .)
    STR             reduce using rule 48 (type_specifier -> BOOL .)
    UNTYPED         reduce using rule 48 (type_specifier -> BOOL .)
    VOID            reduce using rule 48 (type_specifier -> BOOL .)
    LIST            reduce using rule 48 (type_specifier -> BOOL .)
    $end            reduce using rule 48 (type_specifier -> BOOL .)
    RBRACE          reduce using rule 48 (type_specifier -> BOOL .)
    CASE            reduce using rule 48 (type_specifier -> BOOL .)
    DEFAULT         reduce using rule 48 (type_specifier -> BOOL .)
    AS              reduce using rule 48 (type_specifier -> BOOL .)
    RPAREN          reduce using rule 48 (type_specifier -> BOOL .)
    COMMA           reduce using rule 48 (type_specifier -> BOOL .)
    RBRACKET        reduce using rule 48 (type_specifier -> BOOL .)
    LBRACE          reduce using rule 48 (type_specifier -> BOOL .)
    COLON           reduce using rule 48 (type_specifier -> BOOL .)


state 30

    (49) type_specifier -> STR .

    IDENTIFIER      reduce using rule 49 (type_specifier -> STR .)
    LBRACKET        reduce using rule 49 (type_specifier -> STR .)
    PLUS            reduce using rule 49 (type_specifier -> STR .)
    MINUS           reduce using rule 49 (type_specifier -> STR .)
    MUL             reduce using rule 49 (type_specifier -> STR .)
    DIV             reduce using rule 49 (type_specifier -> STR .)
    GT              reduce using rule 49 (type_specifier -> STR .)
    LT              reduce using rule 49 (type_specifier -> STR .)
    EQ              reduce using rule 49 (type_specifier -> STR .)
    GE              reduce using rule 49 (type_specifier -> STR .)
    LE              reduce using rule 49 (type_specifier -> STR .)
    NE              reduce using rule 49 (type_specifier -> STR .)
    RARROW          reduce using rule 49 (type_specifier -> STR .)
    SEMI            reduce using rule 49 (type_specifier -> STR .)
    IMPORT          reduce using rule 49 (type_specifier -> STR .)
    IF              reduce using rule 49 (type_specifier -> STR .)
    FOR             reduce using rule 49 (type_specifier -> STR .)
    WHILE           reduce using rule 49 (type_specifier -> STR .)
    SWITCH          reduce using rule 49 (type_specifier -> STR .)
    BREAK           reduce using rule 49 (type_specifier -> STR .)
    INTEGER_LITERAL reduce using rule 49 (type_specifier -> STR .)
    FLOAT_LITERAL   reduce using rule 49 (type_specifier -> STR .)
    TRUE            reduce using rule 49 (type_specifier -> STR .)
    FALSE           reduce using rule 49 (type_specifier -> STR .)
    STRING_LITERAL  reduce using rule 49 (type_specifier -> STR .)
    LPAREN          reduce using rule 49 (type_specifier -> STR .)
    RETURN          reduce using rule 49 (type_specifier -> STR .)
    INT             reduce using rule 49 (type_specifier -> STR .)
    FLOAT           reduce using rule 49 (type_specifier -> STR .)
    BOOL            reduce using rule 49 (type_specifier -> STR .)
    STR             reduce using rule 49 (type_specifier -> STR .)
    UNTYPED         reduce using rule 49 (type_specifier -> STR .)
    VOID            reduce using rule 49 (type_specifier -> STR .)
    LIST            reduce using rule 49 (type_specifier -> STR .)
    $end            reduce using rule 49 (type_specifier -> STR .)
    RBRACE          reduce using rule 49 (type_specifier -> STR .)
    CASE            reduce using rule 49 (type_specifier -> STR .)
    DEFAULT         reduce using rule 49 (type_specifier -> STR .)
    AS              reduce using rule 49 (type_specifier -> STR .)
    RPAREN          reduce using rule 49 (type_specifier -> STR .)
    COMMA           reduce using rule 49 (type_specifier -> STR .)
    RBRACKET        reduce using rule 49 (type_specifier -> STR .)
    LBRACE          reduce using rule 49 (type_specifier -> STR .)
    COLON           reduce using rule 49 (type_specifier -> STR .)


state 31

    (50) type_specifier -> UNTYPED .

    IDENTIFIER      reduce using rule 50 (type_specifier -> UNTYPED .)
    LBRACKET        reduce using rule 50 (type_specifier -> UNTYPED .)
    PLUS            reduce using rule 50 (type_specifier -> UNTYPED .)
    MINUS           reduce using rule 50 (type_specifier -> UNTYPED .)
    MUL             reduce using rule 50 (type_specifier -> UNTYPED .)
    DIV             reduce using rule 50 (type_specifier -> UNTYPED .)
    GT              reduce using rule 50 (type_specifier -> UNTYPED .)
    LT              reduce using rule 50 (type_specifier -> UNTYPED .)
    EQ              reduce using rule 50 (type_specifier -> UNTYPED .)
    GE              reduce using rule 50 (type_specifier -> UNTYPED .)
    LE              reduce using rule 50 (type_specifier -> UNTYPED .)
    NE              reduce using rule 50 (type_specifier -> UNTYPED .)
    RARROW          reduce using rule 50 (type_specifier -> UNTYPED .)
    SEMI            reduce using rule 50 (type_specifier -> UNTYPED .)
    IMPORT          reduce using rule 50 (type_specifier -> UNTYPED .)
    IF              reduce using rule 50 (type_specifier -> UNTYPED .)
    FOR             reduce using rule 50 (type_specifier -> UNTYPED .)
    WHILE           reduce using rule 50 (type_specifier -> UNTYPED .)
    SWITCH          reduce using rule 50 (type_specifier -> UNTYPED .)
    BREAK           reduce using rule 50 (type_specifier -> UNTYPED .)
    INTEGER_LITERAL reduce using rule 50 (type_specifier -> UNTYPED .)
    FLOAT_LITERAL   reduce using rule 50 (type_specifier -> UNTYPED .)
    TRUE            reduce using rule 50 (type_specifier -> UNTYPED .)
    FALSE           reduce using rule 50 (type_specifier -> UNTYPED .)
    STRING_LITERAL  reduce using rule 50 (type_specifier -> UNTYPED .)
    LPAREN          reduce using rule 50 (type_specifier -> UNTYPED .)
    RETURN          reduce using rule 50 (type_specifier -> UNTYPED .)
    INT             reduce using rule 50 (type_specifier -> UNTYPED .)
    FLOAT           reduce using rule 50 (type_specifier -> UNTYPED .)
    BOOL            reduce using rule 50 (type_specifier -> UNTYPED .)
    STR             reduce using rule 50 (type_specifier -> UNTYPED .)
    UNTYPED         reduce using rule 50 (type_specifier -> UNTYPED .)
    VOID            reduce using rule 50 (type_specifier -> UNTYPED .)
    LIST            reduce using rule 50 (type_specifier -> UNTYPED .)
    $end            reduce using rule 50 (type_specifier -> UNTYPED .)
    RBRACE          reduce using rule 50 (type_specifier -> UNTYPED .)
    CASE            reduce using rule 50 (type_specifier -> UNTYPED .)
    DEFAULT         reduce using rule 50 (type_specifier -> UNTYPED .)
    AS              reduce using rule 50 (type_specifier -> UNTYPED .)
    RPAREN          reduce using rule 50 (type_specifier -> UNTYPED .)
    COMMA           reduce using rule 50 (type_specifier -> UNTYPED .)
    RBRACKET        reduce using rule 50 (type_specifier -> UNTYPED .)
    LBRACE          reduce using rule 50 (type_specifier -> UNTYPED .)
    COLON           reduce using rule 50 (type_specifier -> UNTYPED .)


state 32

    (51) type_specifier -> VOID .

    IDENTIFIER      reduce using rule 51 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 51 (type_specifier -> VOID .)
    PLUS            reduce using rule 51 (type_specifier -> VOID .)
    MINUS           reduce using rule 51 (type_specifier -> VOID .)
    MUL             reduce using rule 51 (type_specifier -> VOID .)
    DIV             reduce using rule 51 (type_specifier -> VOID .)
    GT              reduce using rule 51 (type_specifier -> VOID .)
    LT              reduce using rule 51 (type_specifier -> VOID .)
    EQ              reduce using rule 51 (type_specifier -> VOID .)
    GE              reduce using rule 51 (type_specifier -> VOID .)
    LE              reduce using rule 51 (type_specifier -> VOID .)
    NE              reduce using rule 51 (type_specifier -> VOID .)
    RARROW          reduce using rule 51 (type_specifier -> VOID .)
    SEMI            reduce using rule 51 (type_specifier -> VOID .)
    IMPORT          reduce using rule 51 (type_specifier -> VOID .)
    IF              reduce using rule 51 (type_specifier -> VOID .)
    FOR             reduce using rule 51 (type_specifier -> VOID .)
    WHILE           reduce using rule 51 (type_specifier -> VOID .)
    SWITCH          reduce using rule 51 (type_specifier -> VOID .)
    BREAK           reduce using rule 51 (type_specifier -> VOID .)
    INTEGER_LITERAL reduce using rule 51 (type_specifier -> VOID .)
    FLOAT_LITERAL   reduce using rule 51 (type_specifier -> VOID .)
    TRUE            reduce using rule 51 (type_specifier -> VOID .)
    FALSE           reduce using rule 51 (type_specifier -> VOID .)
    STRING_LITERAL  reduce using rule 51 (type_specifier -> VOID .)
    LPAREN          reduce using rule 51 (type_specifier -> VOID .)
    RETURN          reduce using rule 51 (type_specifier -> VOID .)
    INT             reduce using rule 51 (type_specifier -> VOID .)
    FLOAT           reduce using rule 51 (type_specifier -> VOID .)
    BOOL            reduce using rule 51 (type_specifier -> VOID .)
    STR             reduce using rule 51 (type_specifier -> VOID .)
    UNTYPED         reduce using rule 51 (type_specifier -> VOID .)
    VOID            reduce using rule 51 (type_specifier -> VOID .)
    LIST            reduce using rule 51 (type_specifier -> VOID .)
    $end            reduce using rule 51 (type_specifier -> VOID .)
    RBRACE          reduce using rule 51 (type_specifier -> VOID .)
    CASE            reduce using rule 51 (type_specifier -> VOID .)
    DEFAULT         reduce using rule 51 (type_specifier -> VOID .)
    AS              reduce using rule 51 (type_specifier -> VOID .)
    RPAREN          reduce using rule 51 (type_specifier -> VOID .)
    COMMA           reduce using rule 51 (type_specifier -> VOID .)
    RBRACKET        reduce using rule 51 (type_specifier -> VOID .)
    LBRACE          reduce using rule 51 (type_specifier -> VOID .)
    COLON           reduce using rule 51 (type_specifier -> VOID .)


state 33

    (52) type_specifier -> LIST . LT type_specifier GT

    LT              shift and go to state 73


state 34

    (2) statements -> statement SEMI . statements
    (3) statements -> statement SEMI .
    (2) statements -> . statement SEMI statements
    (3) statements -> . statement SEMI
    (4) statements -> . statement statements
    (5) statements -> . statement
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    $end            reduce using rule 3 (statements -> statement SEMI .)
    RBRACE          reduce using rule 3 (statements -> statement SEMI .)
    CASE            reduce using rule 3 (statements -> statement SEMI .)
    DEFAULT         reduce using rule 3 (statements -> statement SEMI .)
    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    statement                      shift and go to state 3
    statements                     shift and go to state 74
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    expression                     shift and go to state 7
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9
    type_specifier                 shift and go to state 15

state 35

    (4) statements -> statement statements .

    $end            reduce using rule 4 (statements -> statement statements .)
    RBRACE          reduce using rule 4 (statements -> statement statements .)
    CASE            reduce using rule 4 (statements -> statement statements .)
    DEFAULT         reduce using rule 4 (statements -> statement statements .)


state 36

    (40) expression -> expression LBRACKET . expression RBRACKET
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 75

state 37

    (59) expression -> expression PLUS . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 76

state 38

    (60) expression -> expression MINUS . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 77

state 39

    (61) expression -> expression MUL . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 78

state 40

    (62) expression -> expression DIV . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 79

state 41

    (71) expression -> expression GT . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 80

state 42

    (72) expression -> expression LT . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 81

state 43

    (73) expression -> expression EQ . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 82

state 44

    (74) expression -> expression GE . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 83

state 45

    (75) expression -> expression LE . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 84

state 46

    (76) expression -> expression NE . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 85

state 47

    (78) expression -> expression RARROW . type_specifier
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    type_specifier                 shift and go to state 86

state 48

    (23) statement -> IMPORT expression . AS IDENTIFIER
    (24) statement -> IMPORT expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    AS              shift and go to state 87
    SEMI            reduce using rule 24 (statement -> IMPORT expression .)
    IMPORT          reduce using rule 24 (statement -> IMPORT expression .)
    IF              reduce using rule 24 (statement -> IMPORT expression .)
    FOR             reduce using rule 24 (statement -> IMPORT expression .)
    WHILE           reduce using rule 24 (statement -> IMPORT expression .)
    SWITCH          reduce using rule 24 (statement -> IMPORT expression .)
    BREAK           reduce using rule 24 (statement -> IMPORT expression .)
    IDENTIFIER      reduce using rule 24 (statement -> IMPORT expression .)
    INTEGER_LITERAL reduce using rule 24 (statement -> IMPORT expression .)
    FLOAT_LITERAL   reduce using rule 24 (statement -> IMPORT expression .)
    TRUE            reduce using rule 24 (statement -> IMPORT expression .)
    FALSE           reduce using rule 24 (statement -> IMPORT expression .)
    STRING_LITERAL  reduce using rule 24 (statement -> IMPORT expression .)
    LPAREN          reduce using rule 24 (statement -> IMPORT expression .)
    RETURN          reduce using rule 24 (statement -> IMPORT expression .)
    INT             reduce using rule 24 (statement -> IMPORT expression .)
    FLOAT           reduce using rule 24 (statement -> IMPORT expression .)
    BOOL            reduce using rule 24 (statement -> IMPORT expression .)
    STR             reduce using rule 24 (statement -> IMPORT expression .)
    UNTYPED         reduce using rule 24 (statement -> IMPORT expression .)
    VOID            reduce using rule 24 (statement -> IMPORT expression .)
    LIST            reduce using rule 24 (statement -> IMPORT expression .)
    $end            reduce using rule 24 (statement -> IMPORT expression .)
    RBRACE          reduce using rule 24 (statement -> IMPORT expression .)
    CASE            reduce using rule 24 (statement -> IMPORT expression .)
    DEFAULT         reduce using rule 24 (statement -> IMPORT expression .)
    RPAREN          reduce using rule 24 (statement -> IMPORT expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 24 (statement -> IMPORT expression .) ]
  ! MINUS           [ reduce using rule 24 (statement -> IMPORT expression .) ]


state 49

    (11) expression -> IDENTIFIER . LPAREN arguments RPAREN
    (12) expression -> IDENTIFIER . PIPE IDENTIFIER LPAREN arguments RPAREN
    (44) expression -> IDENTIFIER . AT expression
    (70) expression -> IDENTIFIER .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 52
    PIPE            shift and go to state 53
    AT              shift and go to state 54
    AS              reduce using rule 70 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 70 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 70 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 70 (expression -> IDENTIFIER .)
    MUL             reduce using rule 70 (expression -> IDENTIFIER .)
    DIV             reduce using rule 70 (expression -> IDENTIFIER .)
    GT              reduce using rule 70 (expression -> IDENTIFIER .)
    LT              reduce using rule 70 (expression -> IDENTIFIER .)
    EQ              reduce using rule 70 (expression -> IDENTIFIER .)
    GE              reduce using rule 70 (expression -> IDENTIFIER .)
    LE              reduce using rule 70 (expression -> IDENTIFIER .)
    NE              reduce using rule 70 (expression -> IDENTIFIER .)
    RARROW          reduce using rule 70 (expression -> IDENTIFIER .)
    SEMI            reduce using rule 70 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 70 (expression -> IDENTIFIER .)
    IF              reduce using rule 70 (expression -> IDENTIFIER .)
    FOR             reduce using rule 70 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 70 (expression -> IDENTIFIER .)
    SWITCH          reduce using rule 70 (expression -> IDENTIFIER .)
    BREAK           reduce using rule 70 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 70 (expression -> IDENTIFIER .)
    INTEGER_LITERAL reduce using rule 70 (expression -> IDENTIFIER .)
    FLOAT_LITERAL   reduce using rule 70 (expression -> IDENTIFIER .)
    TRUE            reduce using rule 70 (expression -> IDENTIFIER .)
    FALSE           reduce using rule 70 (expression -> IDENTIFIER .)
    STRING_LITERAL  reduce using rule 70 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 70 (expression -> IDENTIFIER .)
    INT             reduce using rule 70 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 70 (expression -> IDENTIFIER .)
    BOOL            reduce using rule 70 (expression -> IDENTIFIER .)
    STR             reduce using rule 70 (expression -> IDENTIFIER .)
    UNTYPED         reduce using rule 70 (expression -> IDENTIFIER .)
    VOID            reduce using rule 70 (expression -> IDENTIFIER .)
    LIST            reduce using rule 70 (expression -> IDENTIFIER .)
    $end            reduce using rule 70 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 70 (expression -> IDENTIFIER .)
    CASE            reduce using rule 70 (expression -> IDENTIFIER .)
    DEFAULT         reduce using rule 70 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 70 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 70 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 70 (expression -> IDENTIFIER .)
    LBRACE          reduce using rule 70 (expression -> IDENTIFIER .)
    COLON           reduce using rule 70 (expression -> IDENTIFIER .)

  ! LPAREN          [ reduce using rule 70 (expression -> IDENTIFIER .) ]


state 50

    (53) assignment -> IDENTIFIER EQUALS . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 88

state 51

    (54) assignment -> IDENTIFIER double_operation . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 89

state 52

    (11) expression -> IDENTIFIER LPAREN . arguments RPAREN
    (13) arguments -> . expression COMMA arguments
    (14) arguments -> . expression
    (15) arguments -> .
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    RPAREN          reduce using rule 15 (arguments -> .)
    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    arguments                      shift and go to state 90
    expression                     shift and go to state 91

state 53

    (12) expression -> IDENTIFIER PIPE . IDENTIFIER LPAREN arguments RPAREN

    IDENTIFIER      shift and go to state 92


state 54

    (44) expression -> IDENTIFIER AT . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 93

state 55

    (41) list_operation -> IDENTIFIER LBRACKET . expression RBRACKET EQUALS expression
    (42) list_operation -> IDENTIFIER LBRACKET . expression RBRACKET LARROW expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 94

state 56

    (43) list_operation -> IDENTIFIER MINUSEQ . LBRACKET expression RBRACKET
    (56) double_operation -> MINUSEQ .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 95
    IDENTIFIER      reduce using rule 56 (double_operation -> MINUSEQ .)
    INTEGER_LITERAL reduce using rule 56 (double_operation -> MINUSEQ .)
    MINUS           reduce using rule 56 (double_operation -> MINUSEQ .)
    FLOAT_LITERAL   reduce using rule 56 (double_operation -> MINUSEQ .)
    TRUE            reduce using rule 56 (double_operation -> MINUSEQ .)
    FALSE           reduce using rule 56 (double_operation -> MINUSEQ .)
    STRING_LITERAL  reduce using rule 56 (double_operation -> MINUSEQ .)
    LPAREN          reduce using rule 56 (double_operation -> MINUSEQ .)

  ! LBRACKET        [ reduce using rule 56 (double_operation -> MINUSEQ .) ]


state 57

    (55) double_operation -> PLUSEQ .

    IDENTIFIER      reduce using rule 55 (double_operation -> PLUSEQ .)
    LBRACKET        reduce using rule 55 (double_operation -> PLUSEQ .)
    INTEGER_LITERAL reduce using rule 55 (double_operation -> PLUSEQ .)
    MINUS           reduce using rule 55 (double_operation -> PLUSEQ .)
    FLOAT_LITERAL   reduce using rule 55 (double_operation -> PLUSEQ .)
    TRUE            reduce using rule 55 (double_operation -> PLUSEQ .)
    FALSE           reduce using rule 55 (double_operation -> PLUSEQ .)
    STRING_LITERAL  reduce using rule 55 (double_operation -> PLUSEQ .)
    LPAREN          reduce using rule 55 (double_operation -> PLUSEQ .)


state 58

    (57) double_operation -> MULEQ .

    IDENTIFIER      reduce using rule 57 (double_operation -> MULEQ .)
    LBRACKET        reduce using rule 57 (double_operation -> MULEQ .)
    INTEGER_LITERAL reduce using rule 57 (double_operation -> MULEQ .)
    MINUS           reduce using rule 57 (double_operation -> MULEQ .)
    FLOAT_LITERAL   reduce using rule 57 (double_operation -> MULEQ .)
    TRUE            reduce using rule 57 (double_operation -> MULEQ .)
    FALSE           reduce using rule 57 (double_operation -> MULEQ .)
    STRING_LITERAL  reduce using rule 57 (double_operation -> MULEQ .)
    LPAREN          reduce using rule 57 (double_operation -> MULEQ .)


state 59

    (58) double_operation -> DIVEQ .

    IDENTIFIER      reduce using rule 58 (double_operation -> DIVEQ .)
    LBRACKET        reduce using rule 58 (double_operation -> DIVEQ .)
    INTEGER_LITERAL reduce using rule 58 (double_operation -> DIVEQ .)
    MINUS           reduce using rule 58 (double_operation -> DIVEQ .)
    FLOAT_LITERAL   reduce using rule 58 (double_operation -> DIVEQ .)
    TRUE            reduce using rule 58 (double_operation -> DIVEQ .)
    FALSE           reduce using rule 58 (double_operation -> DIVEQ .)
    STRING_LITERAL  reduce using rule 58 (double_operation -> DIVEQ .)
    LPAREN          reduce using rule 58 (double_operation -> DIVEQ .)


state 60

    (25) statement -> IF LPAREN . expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> IF LPAREN . expression RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 96

state 61

    (77) expression -> LPAREN expression . RPAREN
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    RPAREN          shift and go to state 97
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 62

    (27) statement -> FOR LPAREN . statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> FOR LPAREN . type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI

    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26

    statement                      shift and go to state 98
    expression                     shift and go to state 7
    type_specifier                 shift and go to state 99
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9

state 63

    (45) declaration -> type_specifier IDENTIFIER . EQUALS expression
    (6) function_declaration -> type_specifier IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> type_specifier IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    EQUALS          shift and go to state 100
    LPAREN          shift and go to state 101


state 64

    (29) statement -> WHILE LPAREN . expression RPAREN LBRACE statements RBRACE
    (30) statement -> WHILE LPAREN . expression RPAREN COLON expression LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 102

state 65

    (31) statement -> SWITCH LPAREN . expression RPAREN LBRACE case_statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 103

state 66

    (35) statement -> BREAK SEMI .

    SEMI            reduce using rule 35 (statement -> BREAK SEMI .)
    IMPORT          reduce using rule 35 (statement -> BREAK SEMI .)
    IF              reduce using rule 35 (statement -> BREAK SEMI .)
    FOR             reduce using rule 35 (statement -> BREAK SEMI .)
    WHILE           reduce using rule 35 (statement -> BREAK SEMI .)
    SWITCH          reduce using rule 35 (statement -> BREAK SEMI .)
    BREAK           reduce using rule 35 (statement -> BREAK SEMI .)
    IDENTIFIER      reduce using rule 35 (statement -> BREAK SEMI .)
    LBRACKET        reduce using rule 35 (statement -> BREAK SEMI .)
    INTEGER_LITERAL reduce using rule 35 (statement -> BREAK SEMI .)
    MINUS           reduce using rule 35 (statement -> BREAK SEMI .)
    FLOAT_LITERAL   reduce using rule 35 (statement -> BREAK SEMI .)
    TRUE            reduce using rule 35 (statement -> BREAK SEMI .)
    FALSE           reduce using rule 35 (statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 35 (statement -> BREAK SEMI .)
    LPAREN          reduce using rule 35 (statement -> BREAK SEMI .)
    RETURN          reduce using rule 35 (statement -> BREAK SEMI .)
    INT             reduce using rule 35 (statement -> BREAK SEMI .)
    FLOAT           reduce using rule 35 (statement -> BREAK SEMI .)
    BOOL            reduce using rule 35 (statement -> BREAK SEMI .)
    STR             reduce using rule 35 (statement -> BREAK SEMI .)
    UNTYPED         reduce using rule 35 (statement -> BREAK SEMI .)
    VOID            reduce using rule 35 (statement -> BREAK SEMI .)
    LIST            reduce using rule 35 (statement -> BREAK SEMI .)
    $end            reduce using rule 35 (statement -> BREAK SEMI .)
    RBRACE          reduce using rule 35 (statement -> BREAK SEMI .)
    CASE            reduce using rule 35 (statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 35 (statement -> BREAK SEMI .)
    RPAREN          reduce using rule 35 (statement -> BREAK SEMI .)


state 67

    (36) expression -> LBRACKET elements . RBRACKET

    RBRACKET        shift and go to state 104


state 68

    (37) expression -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    MUL             reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    DIV             reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    GT              reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    LT              reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    EQ              reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    GE              reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    LE              reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    NE              reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    RARROW          reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    SEMI            reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    IMPORT          reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    IF              reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    FOR             reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    SWITCH          reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    BREAK           reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    INTEGER_LITERAL reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    FLOAT_LITERAL   reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    TRUE            reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    FALSE           reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    STRING_LITERAL  reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    RETURN          reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    INT             reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    FLOAT           reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    BOOL            reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    STR             reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    UNTYPED         reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    VOID            reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    LIST            reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    $end            reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    CASE            reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    DEFAULT         reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    AS              reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 37 (expression -> LBRACKET RBRACKET .)
    COLON           reduce using rule 37 (expression -> LBRACKET RBRACKET .)


state 69

    (38) elements -> expression . COMMA elements
    (39) elements -> expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    COMMA           shift and go to state 105
    RBRACKET        reduce using rule 39 (elements -> expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 70

    (64) expression -> MINUS INTEGER_LITERAL .

    LBRACKET        reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    PLUS            reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    MINUS           reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    MUL             reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    DIV             reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    GT              reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    LT              reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    EQ              reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    GE              reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    LE              reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    NE              reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    RARROW          reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    SEMI            reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    IMPORT          reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    IF              reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    FOR             reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    WHILE           reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    SWITCH          reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    BREAK           reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    IDENTIFIER      reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    INTEGER_LITERAL reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    FLOAT_LITERAL   reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    TRUE            reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    FALSE           reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    STRING_LITERAL  reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    LPAREN          reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    RETURN          reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    INT             reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    FLOAT           reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    BOOL            reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    STR             reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    UNTYPED         reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    VOID            reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    LIST            reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    $end            reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    RBRACE          reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    CASE            reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    DEFAULT         reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    AS              reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    RPAREN          reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    COMMA           reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    RBRACKET        reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    LBRACE          reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)
    COLON           reduce using rule 64 (expression -> MINUS INTEGER_LITERAL .)


state 71

    (66) expression -> MINUS FLOAT_LITERAL .

    LBRACKET        reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    PLUS            reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    MINUS           reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    MUL             reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    DIV             reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    GT              reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    LT              reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    EQ              reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    GE              reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    LE              reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    NE              reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    RARROW          reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    SEMI            reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    IMPORT          reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    IF              reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    FOR             reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    WHILE           reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    SWITCH          reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    BREAK           reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    IDENTIFIER      reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    INTEGER_LITERAL reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    FLOAT_LITERAL   reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    TRUE            reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    FALSE           reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    STRING_LITERAL  reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    LPAREN          reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    RETURN          reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    INT             reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    FLOAT           reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    BOOL            reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    STR             reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    UNTYPED         reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    VOID            reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    LIST            reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    $end            reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    RBRACE          reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    CASE            reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    DEFAULT         reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    AS              reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    RPAREN          reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    COMMA           reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    RBRACKET        reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    LBRACE          reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)
    COLON           reduce using rule 66 (expression -> MINUS FLOAT_LITERAL .)


state 72

    (16) return_statement -> RETURN expression . SEMI
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    SEMI            shift and go to state 106
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 73

    (52) type_specifier -> LIST LT . type_specifier GT
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    type_specifier                 shift and go to state 107

state 74

    (2) statements -> statement SEMI statements .

    $end            reduce using rule 2 (statements -> statement SEMI statements .)
    RBRACE          reduce using rule 2 (statements -> statement SEMI statements .)
    CASE            reduce using rule 2 (statements -> statement SEMI statements .)
    DEFAULT         reduce using rule 2 (statements -> statement SEMI statements .)


state 75

    (40) expression -> expression LBRACKET expression . RBRACKET
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    RBRACKET        shift and go to state 108
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 76

    (59) expression -> expression PLUS expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    SEMI            reduce using rule 59 (expression -> expression PLUS expression .)
    IMPORT          reduce using rule 59 (expression -> expression PLUS expression .)
    IF              reduce using rule 59 (expression -> expression PLUS expression .)
    FOR             reduce using rule 59 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 59 (expression -> expression PLUS expression .)
    SWITCH          reduce using rule 59 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 59 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 59 (expression -> expression PLUS expression .)
    INTEGER_LITERAL reduce using rule 59 (expression -> expression PLUS expression .)
    FLOAT_LITERAL   reduce using rule 59 (expression -> expression PLUS expression .)
    TRUE            reduce using rule 59 (expression -> expression PLUS expression .)
    FALSE           reduce using rule 59 (expression -> expression PLUS expression .)
    STRING_LITERAL  reduce using rule 59 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 59 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 59 (expression -> expression PLUS expression .)
    INT             reduce using rule 59 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 59 (expression -> expression PLUS expression .)
    BOOL            reduce using rule 59 (expression -> expression PLUS expression .)
    STR             reduce using rule 59 (expression -> expression PLUS expression .)
    UNTYPED         reduce using rule 59 (expression -> expression PLUS expression .)
    VOID            reduce using rule 59 (expression -> expression PLUS expression .)
    LIST            reduce using rule 59 (expression -> expression PLUS expression .)
    $end            reduce using rule 59 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 59 (expression -> expression PLUS expression .)
    CASE            reduce using rule 59 (expression -> expression PLUS expression .)
    DEFAULT         reduce using rule 59 (expression -> expression PLUS expression .)
    AS              reduce using rule 59 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 59 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 59 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 59 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 59 (expression -> expression PLUS expression .)
    COLON           reduce using rule 59 (expression -> expression PLUS expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 59 (expression -> expression PLUS expression .) ]
  ! PLUS            [ reduce using rule 59 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression PLUS expression .) ]
  ! MUL             [ reduce using rule 59 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 59 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 59 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 59 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 59 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 59 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 59 (expression -> expression PLUS expression .) ]
  ! NE              [ reduce using rule 59 (expression -> expression PLUS expression .) ]
  ! RARROW          [ reduce using rule 59 (expression -> expression PLUS expression .) ]


state 77

    (60) expression -> expression MINUS expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    SEMI            reduce using rule 60 (expression -> expression MINUS expression .)
    IMPORT          reduce using rule 60 (expression -> expression MINUS expression .)
    IF              reduce using rule 60 (expression -> expression MINUS expression .)
    FOR             reduce using rule 60 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 60 (expression -> expression MINUS expression .)
    SWITCH          reduce using rule 60 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 60 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 60 (expression -> expression MINUS expression .)
    INTEGER_LITERAL reduce using rule 60 (expression -> expression MINUS expression .)
    FLOAT_LITERAL   reduce using rule 60 (expression -> expression MINUS expression .)
    TRUE            reduce using rule 60 (expression -> expression MINUS expression .)
    FALSE           reduce using rule 60 (expression -> expression MINUS expression .)
    STRING_LITERAL  reduce using rule 60 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 60 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 60 (expression -> expression MINUS expression .)
    INT             reduce using rule 60 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 60 (expression -> expression MINUS expression .)
    BOOL            reduce using rule 60 (expression -> expression MINUS expression .)
    STR             reduce using rule 60 (expression -> expression MINUS expression .)
    UNTYPED         reduce using rule 60 (expression -> expression MINUS expression .)
    VOID            reduce using rule 60 (expression -> expression MINUS expression .)
    LIST            reduce using rule 60 (expression -> expression MINUS expression .)
    $end            reduce using rule 60 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 60 (expression -> expression MINUS expression .)
    CASE            reduce using rule 60 (expression -> expression MINUS expression .)
    DEFAULT         reduce using rule 60 (expression -> expression MINUS expression .)
    AS              reduce using rule 60 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 60 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 60 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 60 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 60 (expression -> expression MINUS expression .)
    COLON           reduce using rule 60 (expression -> expression MINUS expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 60 (expression -> expression MINUS expression .) ]
  ! PLUS            [ reduce using rule 60 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression MINUS expression .) ]
  ! MUL             [ reduce using rule 60 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 60 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 60 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 60 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 60 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 60 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 60 (expression -> expression MINUS expression .) ]
  ! NE              [ reduce using rule 60 (expression -> expression MINUS expression .) ]
  ! RARROW          [ reduce using rule 60 (expression -> expression MINUS expression .) ]


state 78

    (61) expression -> expression MUL expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    SEMI            reduce using rule 61 (expression -> expression MUL expression .)
    IMPORT          reduce using rule 61 (expression -> expression MUL expression .)
    IF              reduce using rule 61 (expression -> expression MUL expression .)
    FOR             reduce using rule 61 (expression -> expression MUL expression .)
    WHILE           reduce using rule 61 (expression -> expression MUL expression .)
    SWITCH          reduce using rule 61 (expression -> expression MUL expression .)
    BREAK           reduce using rule 61 (expression -> expression MUL expression .)
    IDENTIFIER      reduce using rule 61 (expression -> expression MUL expression .)
    INTEGER_LITERAL reduce using rule 61 (expression -> expression MUL expression .)
    FLOAT_LITERAL   reduce using rule 61 (expression -> expression MUL expression .)
    TRUE            reduce using rule 61 (expression -> expression MUL expression .)
    FALSE           reduce using rule 61 (expression -> expression MUL expression .)
    STRING_LITERAL  reduce using rule 61 (expression -> expression MUL expression .)
    LPAREN          reduce using rule 61 (expression -> expression MUL expression .)
    RETURN          reduce using rule 61 (expression -> expression MUL expression .)
    INT             reduce using rule 61 (expression -> expression MUL expression .)
    FLOAT           reduce using rule 61 (expression -> expression MUL expression .)
    BOOL            reduce using rule 61 (expression -> expression MUL expression .)
    STR             reduce using rule 61 (expression -> expression MUL expression .)
    UNTYPED         reduce using rule 61 (expression -> expression MUL expression .)
    VOID            reduce using rule 61 (expression -> expression MUL expression .)
    LIST            reduce using rule 61 (expression -> expression MUL expression .)
    $end            reduce using rule 61 (expression -> expression MUL expression .)
    RBRACE          reduce using rule 61 (expression -> expression MUL expression .)
    CASE            reduce using rule 61 (expression -> expression MUL expression .)
    DEFAULT         reduce using rule 61 (expression -> expression MUL expression .)
    AS              reduce using rule 61 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 61 (expression -> expression MUL expression .)
    COMMA           reduce using rule 61 (expression -> expression MUL expression .)
    RBRACKET        reduce using rule 61 (expression -> expression MUL expression .)
    LBRACE          reduce using rule 61 (expression -> expression MUL expression .)
    COLON           reduce using rule 61 (expression -> expression MUL expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 61 (expression -> expression MUL expression .) ]
  ! PLUS            [ reduce using rule 61 (expression -> expression MUL expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression MUL expression .) ]
  ! MUL             [ reduce using rule 61 (expression -> expression MUL expression .) ]
  ! DIV             [ reduce using rule 61 (expression -> expression MUL expression .) ]
  ! GT              [ reduce using rule 61 (expression -> expression MUL expression .) ]
  ! LT              [ reduce using rule 61 (expression -> expression MUL expression .) ]
  ! EQ              [ reduce using rule 61 (expression -> expression MUL expression .) ]
  ! GE              [ reduce using rule 61 (expression -> expression MUL expression .) ]
  ! LE              [ reduce using rule 61 (expression -> expression MUL expression .) ]
  ! NE              [ reduce using rule 61 (expression -> expression MUL expression .) ]
  ! RARROW          [ reduce using rule 61 (expression -> expression MUL expression .) ]


state 79

    (62) expression -> expression DIV expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    SEMI            reduce using rule 62 (expression -> expression DIV expression .)
    IMPORT          reduce using rule 62 (expression -> expression DIV expression .)
    IF              reduce using rule 62 (expression -> expression DIV expression .)
    FOR             reduce using rule 62 (expression -> expression DIV expression .)
    WHILE           reduce using rule 62 (expression -> expression DIV expression .)
    SWITCH          reduce using rule 62 (expression -> expression DIV expression .)
    BREAK           reduce using rule 62 (expression -> expression DIV expression .)
    IDENTIFIER      reduce using rule 62 (expression -> expression DIV expression .)
    INTEGER_LITERAL reduce using rule 62 (expression -> expression DIV expression .)
    FLOAT_LITERAL   reduce using rule 62 (expression -> expression DIV expression .)
    TRUE            reduce using rule 62 (expression -> expression DIV expression .)
    FALSE           reduce using rule 62 (expression -> expression DIV expression .)
    STRING_LITERAL  reduce using rule 62 (expression -> expression DIV expression .)
    LPAREN          reduce using rule 62 (expression -> expression DIV expression .)
    RETURN          reduce using rule 62 (expression -> expression DIV expression .)
    INT             reduce using rule 62 (expression -> expression DIV expression .)
    FLOAT           reduce using rule 62 (expression -> expression DIV expression .)
    BOOL            reduce using rule 62 (expression -> expression DIV expression .)
    STR             reduce using rule 62 (expression -> expression DIV expression .)
    UNTYPED         reduce using rule 62 (expression -> expression DIV expression .)
    VOID            reduce using rule 62 (expression -> expression DIV expression .)
    LIST            reduce using rule 62 (expression -> expression DIV expression .)
    $end            reduce using rule 62 (expression -> expression DIV expression .)
    RBRACE          reduce using rule 62 (expression -> expression DIV expression .)
    CASE            reduce using rule 62 (expression -> expression DIV expression .)
    DEFAULT         reduce using rule 62 (expression -> expression DIV expression .)
    AS              reduce using rule 62 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 62 (expression -> expression DIV expression .)
    COMMA           reduce using rule 62 (expression -> expression DIV expression .)
    RBRACKET        reduce using rule 62 (expression -> expression DIV expression .)
    LBRACE          reduce using rule 62 (expression -> expression DIV expression .)
    COLON           reduce using rule 62 (expression -> expression DIV expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 62 (expression -> expression DIV expression .) ]
  ! PLUS            [ reduce using rule 62 (expression -> expression DIV expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression DIV expression .) ]
  ! MUL             [ reduce using rule 62 (expression -> expression DIV expression .) ]
  ! DIV             [ reduce using rule 62 (expression -> expression DIV expression .) ]
  ! GT              [ reduce using rule 62 (expression -> expression DIV expression .) ]
  ! LT              [ reduce using rule 62 (expression -> expression DIV expression .) ]
  ! EQ              [ reduce using rule 62 (expression -> expression DIV expression .) ]
  ! GE              [ reduce using rule 62 (expression -> expression DIV expression .) ]
  ! LE              [ reduce using rule 62 (expression -> expression DIV expression .) ]
  ! NE              [ reduce using rule 62 (expression -> expression DIV expression .) ]
  ! RARROW          [ reduce using rule 62 (expression -> expression DIV expression .) ]


state 80

    (71) expression -> expression GT expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    SEMI            reduce using rule 71 (expression -> expression GT expression .)
    IMPORT          reduce using rule 71 (expression -> expression GT expression .)
    IF              reduce using rule 71 (expression -> expression GT expression .)
    FOR             reduce using rule 71 (expression -> expression GT expression .)
    WHILE           reduce using rule 71 (expression -> expression GT expression .)
    SWITCH          reduce using rule 71 (expression -> expression GT expression .)
    BREAK           reduce using rule 71 (expression -> expression GT expression .)
    IDENTIFIER      reduce using rule 71 (expression -> expression GT expression .)
    INTEGER_LITERAL reduce using rule 71 (expression -> expression GT expression .)
    FLOAT_LITERAL   reduce using rule 71 (expression -> expression GT expression .)
    TRUE            reduce using rule 71 (expression -> expression GT expression .)
    FALSE           reduce using rule 71 (expression -> expression GT expression .)
    STRING_LITERAL  reduce using rule 71 (expression -> expression GT expression .)
    LPAREN          reduce using rule 71 (expression -> expression GT expression .)
    RETURN          reduce using rule 71 (expression -> expression GT expression .)
    INT             reduce using rule 71 (expression -> expression GT expression .)
    FLOAT           reduce using rule 71 (expression -> expression GT expression .)
    BOOL            reduce using rule 71 (expression -> expression GT expression .)
    STR             reduce using rule 71 (expression -> expression GT expression .)
    UNTYPED         reduce using rule 71 (expression -> expression GT expression .)
    VOID            reduce using rule 71 (expression -> expression GT expression .)
    LIST            reduce using rule 71 (expression -> expression GT expression .)
    $end            reduce using rule 71 (expression -> expression GT expression .)
    RBRACE          reduce using rule 71 (expression -> expression GT expression .)
    CASE            reduce using rule 71 (expression -> expression GT expression .)
    DEFAULT         reduce using rule 71 (expression -> expression GT expression .)
    AS              reduce using rule 71 (expression -> expression GT expression .)
    RPAREN          reduce using rule 71 (expression -> expression GT expression .)
    COMMA           reduce using rule 71 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 71 (expression -> expression GT expression .)
    LBRACE          reduce using rule 71 (expression -> expression GT expression .)
    COLON           reduce using rule 71 (expression -> expression GT expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 71 (expression -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 71 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression GT expression .) ]
  ! MUL             [ reduce using rule 71 (expression -> expression GT expression .) ]
  ! DIV             [ reduce using rule 71 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 71 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 71 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 71 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 71 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 71 (expression -> expression GT expression .) ]
  ! NE              [ reduce using rule 71 (expression -> expression GT expression .) ]
  ! RARROW          [ reduce using rule 71 (expression -> expression GT expression .) ]


state 81

    (72) expression -> expression LT expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    SEMI            reduce using rule 72 (expression -> expression LT expression .)
    IMPORT          reduce using rule 72 (expression -> expression LT expression .)
    IF              reduce using rule 72 (expression -> expression LT expression .)
    FOR             reduce using rule 72 (expression -> expression LT expression .)
    WHILE           reduce using rule 72 (expression -> expression LT expression .)
    SWITCH          reduce using rule 72 (expression -> expression LT expression .)
    BREAK           reduce using rule 72 (expression -> expression LT expression .)
    IDENTIFIER      reduce using rule 72 (expression -> expression LT expression .)
    INTEGER_LITERAL reduce using rule 72 (expression -> expression LT expression .)
    FLOAT_LITERAL   reduce using rule 72 (expression -> expression LT expression .)
    TRUE            reduce using rule 72 (expression -> expression LT expression .)
    FALSE           reduce using rule 72 (expression -> expression LT expression .)
    STRING_LITERAL  reduce using rule 72 (expression -> expression LT expression .)
    LPAREN          reduce using rule 72 (expression -> expression LT expression .)
    RETURN          reduce using rule 72 (expression -> expression LT expression .)
    INT             reduce using rule 72 (expression -> expression LT expression .)
    FLOAT           reduce using rule 72 (expression -> expression LT expression .)
    BOOL            reduce using rule 72 (expression -> expression LT expression .)
    STR             reduce using rule 72 (expression -> expression LT expression .)
    UNTYPED         reduce using rule 72 (expression -> expression LT expression .)
    VOID            reduce using rule 72 (expression -> expression LT expression .)
    LIST            reduce using rule 72 (expression -> expression LT expression .)
    $end            reduce using rule 72 (expression -> expression LT expression .)
    RBRACE          reduce using rule 72 (expression -> expression LT expression .)
    CASE            reduce using rule 72 (expression -> expression LT expression .)
    DEFAULT         reduce using rule 72 (expression -> expression LT expression .)
    AS              reduce using rule 72 (expression -> expression LT expression .)
    RPAREN          reduce using rule 72 (expression -> expression LT expression .)
    COMMA           reduce using rule 72 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 72 (expression -> expression LT expression .)
    LBRACE          reduce using rule 72 (expression -> expression LT expression .)
    COLON           reduce using rule 72 (expression -> expression LT expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! MUL             [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! NE              [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! RARROW          [ reduce using rule 72 (expression -> expression LT expression .) ]


state 82

    (73) expression -> expression EQ expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    SEMI            reduce using rule 73 (expression -> expression EQ expression .)
    IMPORT          reduce using rule 73 (expression -> expression EQ expression .)
    IF              reduce using rule 73 (expression -> expression EQ expression .)
    FOR             reduce using rule 73 (expression -> expression EQ expression .)
    WHILE           reduce using rule 73 (expression -> expression EQ expression .)
    SWITCH          reduce using rule 73 (expression -> expression EQ expression .)
    BREAK           reduce using rule 73 (expression -> expression EQ expression .)
    IDENTIFIER      reduce using rule 73 (expression -> expression EQ expression .)
    INTEGER_LITERAL reduce using rule 73 (expression -> expression EQ expression .)
    FLOAT_LITERAL   reduce using rule 73 (expression -> expression EQ expression .)
    TRUE            reduce using rule 73 (expression -> expression EQ expression .)
    FALSE           reduce using rule 73 (expression -> expression EQ expression .)
    STRING_LITERAL  reduce using rule 73 (expression -> expression EQ expression .)
    LPAREN          reduce using rule 73 (expression -> expression EQ expression .)
    RETURN          reduce using rule 73 (expression -> expression EQ expression .)
    INT             reduce using rule 73 (expression -> expression EQ expression .)
    FLOAT           reduce using rule 73 (expression -> expression EQ expression .)
    BOOL            reduce using rule 73 (expression -> expression EQ expression .)
    STR             reduce using rule 73 (expression -> expression EQ expression .)
    UNTYPED         reduce using rule 73 (expression -> expression EQ expression .)
    VOID            reduce using rule 73 (expression -> expression EQ expression .)
    LIST            reduce using rule 73 (expression -> expression EQ expression .)
    $end            reduce using rule 73 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 73 (expression -> expression EQ expression .)
    CASE            reduce using rule 73 (expression -> expression EQ expression .)
    DEFAULT         reduce using rule 73 (expression -> expression EQ expression .)
    AS              reduce using rule 73 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 73 (expression -> expression EQ expression .)
    COMMA           reduce using rule 73 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 73 (expression -> expression EQ expression .)
    LBRACE          reduce using rule 73 (expression -> expression EQ expression .)
    COLON           reduce using rule 73 (expression -> expression EQ expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! MUL             [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! NE              [ reduce using rule 73 (expression -> expression EQ expression .) ]
  ! RARROW          [ reduce using rule 73 (expression -> expression EQ expression .) ]


state 83

    (74) expression -> expression GE expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    SEMI            reduce using rule 74 (expression -> expression GE expression .)
    IMPORT          reduce using rule 74 (expression -> expression GE expression .)
    IF              reduce using rule 74 (expression -> expression GE expression .)
    FOR             reduce using rule 74 (expression -> expression GE expression .)
    WHILE           reduce using rule 74 (expression -> expression GE expression .)
    SWITCH          reduce using rule 74 (expression -> expression GE expression .)
    BREAK           reduce using rule 74 (expression -> expression GE expression .)
    IDENTIFIER      reduce using rule 74 (expression -> expression GE expression .)
    INTEGER_LITERAL reduce using rule 74 (expression -> expression GE expression .)
    FLOAT_LITERAL   reduce using rule 74 (expression -> expression GE expression .)
    TRUE            reduce using rule 74 (expression -> expression GE expression .)
    FALSE           reduce using rule 74 (expression -> expression GE expression .)
    STRING_LITERAL  reduce using rule 74 (expression -> expression GE expression .)
    LPAREN          reduce using rule 74 (expression -> expression GE expression .)
    RETURN          reduce using rule 74 (expression -> expression GE expression .)
    INT             reduce using rule 74 (expression -> expression GE expression .)
    FLOAT           reduce using rule 74 (expression -> expression GE expression .)
    BOOL            reduce using rule 74 (expression -> expression GE expression .)
    STR             reduce using rule 74 (expression -> expression GE expression .)
    UNTYPED         reduce using rule 74 (expression -> expression GE expression .)
    VOID            reduce using rule 74 (expression -> expression GE expression .)
    LIST            reduce using rule 74 (expression -> expression GE expression .)
    $end            reduce using rule 74 (expression -> expression GE expression .)
    RBRACE          reduce using rule 74 (expression -> expression GE expression .)
    CASE            reduce using rule 74 (expression -> expression GE expression .)
    DEFAULT         reduce using rule 74 (expression -> expression GE expression .)
    AS              reduce using rule 74 (expression -> expression GE expression .)
    RPAREN          reduce using rule 74 (expression -> expression GE expression .)
    COMMA           reduce using rule 74 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 74 (expression -> expression GE expression .)
    LBRACE          reduce using rule 74 (expression -> expression GE expression .)
    COLON           reduce using rule 74 (expression -> expression GE expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 74 (expression -> expression GE expression .) ]
  ! PLUS            [ reduce using rule 74 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression GE expression .) ]
  ! MUL             [ reduce using rule 74 (expression -> expression GE expression .) ]
  ! DIV             [ reduce using rule 74 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 74 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 74 (expression -> expression GE expression .) ]
  ! EQ              [ reduce using rule 74 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 74 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 74 (expression -> expression GE expression .) ]
  ! NE              [ reduce using rule 74 (expression -> expression GE expression .) ]
  ! RARROW          [ reduce using rule 74 (expression -> expression GE expression .) ]


state 84

    (75) expression -> expression LE expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    SEMI            reduce using rule 75 (expression -> expression LE expression .)
    IMPORT          reduce using rule 75 (expression -> expression LE expression .)
    IF              reduce using rule 75 (expression -> expression LE expression .)
    FOR             reduce using rule 75 (expression -> expression LE expression .)
    WHILE           reduce using rule 75 (expression -> expression LE expression .)
    SWITCH          reduce using rule 75 (expression -> expression LE expression .)
    BREAK           reduce using rule 75 (expression -> expression LE expression .)
    IDENTIFIER      reduce using rule 75 (expression -> expression LE expression .)
    INTEGER_LITERAL reduce using rule 75 (expression -> expression LE expression .)
    FLOAT_LITERAL   reduce using rule 75 (expression -> expression LE expression .)
    TRUE            reduce using rule 75 (expression -> expression LE expression .)
    FALSE           reduce using rule 75 (expression -> expression LE expression .)
    STRING_LITERAL  reduce using rule 75 (expression -> expression LE expression .)
    LPAREN          reduce using rule 75 (expression -> expression LE expression .)
    RETURN          reduce using rule 75 (expression -> expression LE expression .)
    INT             reduce using rule 75 (expression -> expression LE expression .)
    FLOAT           reduce using rule 75 (expression -> expression LE expression .)
    BOOL            reduce using rule 75 (expression -> expression LE expression .)
    STR             reduce using rule 75 (expression -> expression LE expression .)
    UNTYPED         reduce using rule 75 (expression -> expression LE expression .)
    VOID            reduce using rule 75 (expression -> expression LE expression .)
    LIST            reduce using rule 75 (expression -> expression LE expression .)
    $end            reduce using rule 75 (expression -> expression LE expression .)
    RBRACE          reduce using rule 75 (expression -> expression LE expression .)
    CASE            reduce using rule 75 (expression -> expression LE expression .)
    DEFAULT         reduce using rule 75 (expression -> expression LE expression .)
    AS              reduce using rule 75 (expression -> expression LE expression .)
    RPAREN          reduce using rule 75 (expression -> expression LE expression .)
    COMMA           reduce using rule 75 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 75 (expression -> expression LE expression .)
    LBRACE          reduce using rule 75 (expression -> expression LE expression .)
    COLON           reduce using rule 75 (expression -> expression LE expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! MUL             [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! DIV             [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! EQ              [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! NE              [ reduce using rule 75 (expression -> expression LE expression .) ]
  ! RARROW          [ reduce using rule 75 (expression -> expression LE expression .) ]


state 85

    (76) expression -> expression NE expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    SEMI            reduce using rule 76 (expression -> expression NE expression .)
    IMPORT          reduce using rule 76 (expression -> expression NE expression .)
    IF              reduce using rule 76 (expression -> expression NE expression .)
    FOR             reduce using rule 76 (expression -> expression NE expression .)
    WHILE           reduce using rule 76 (expression -> expression NE expression .)
    SWITCH          reduce using rule 76 (expression -> expression NE expression .)
    BREAK           reduce using rule 76 (expression -> expression NE expression .)
    IDENTIFIER      reduce using rule 76 (expression -> expression NE expression .)
    INTEGER_LITERAL reduce using rule 76 (expression -> expression NE expression .)
    FLOAT_LITERAL   reduce using rule 76 (expression -> expression NE expression .)
    TRUE            reduce using rule 76 (expression -> expression NE expression .)
    FALSE           reduce using rule 76 (expression -> expression NE expression .)
    STRING_LITERAL  reduce using rule 76 (expression -> expression NE expression .)
    LPAREN          reduce using rule 76 (expression -> expression NE expression .)
    RETURN          reduce using rule 76 (expression -> expression NE expression .)
    INT             reduce using rule 76 (expression -> expression NE expression .)
    FLOAT           reduce using rule 76 (expression -> expression NE expression .)
    BOOL            reduce using rule 76 (expression -> expression NE expression .)
    STR             reduce using rule 76 (expression -> expression NE expression .)
    UNTYPED         reduce using rule 76 (expression -> expression NE expression .)
    VOID            reduce using rule 76 (expression -> expression NE expression .)
    LIST            reduce using rule 76 (expression -> expression NE expression .)
    $end            reduce using rule 76 (expression -> expression NE expression .)
    RBRACE          reduce using rule 76 (expression -> expression NE expression .)
    CASE            reduce using rule 76 (expression -> expression NE expression .)
    DEFAULT         reduce using rule 76 (expression -> expression NE expression .)
    AS              reduce using rule 76 (expression -> expression NE expression .)
    RPAREN          reduce using rule 76 (expression -> expression NE expression .)
    COMMA           reduce using rule 76 (expression -> expression NE expression .)
    RBRACKET        reduce using rule 76 (expression -> expression NE expression .)
    LBRACE          reduce using rule 76 (expression -> expression NE expression .)
    COLON           reduce using rule 76 (expression -> expression NE expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! PLUS            [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! MUL             [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! DIV             [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! EQ              [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! NE              [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! RARROW          [ reduce using rule 76 (expression -> expression NE expression .) ]


state 86

    (78) expression -> expression RARROW type_specifier .

    LBRACKET        reduce using rule 78 (expression -> expression RARROW type_specifier .)
    PLUS            reduce using rule 78 (expression -> expression RARROW type_specifier .)
    MINUS           reduce using rule 78 (expression -> expression RARROW type_specifier .)
    MUL             reduce using rule 78 (expression -> expression RARROW type_specifier .)
    DIV             reduce using rule 78 (expression -> expression RARROW type_specifier .)
    GT              reduce using rule 78 (expression -> expression RARROW type_specifier .)
    LT              reduce using rule 78 (expression -> expression RARROW type_specifier .)
    EQ              reduce using rule 78 (expression -> expression RARROW type_specifier .)
    GE              reduce using rule 78 (expression -> expression RARROW type_specifier .)
    LE              reduce using rule 78 (expression -> expression RARROW type_specifier .)
    NE              reduce using rule 78 (expression -> expression RARROW type_specifier .)
    RARROW          reduce using rule 78 (expression -> expression RARROW type_specifier .)
    SEMI            reduce using rule 78 (expression -> expression RARROW type_specifier .)
    IMPORT          reduce using rule 78 (expression -> expression RARROW type_specifier .)
    IF              reduce using rule 78 (expression -> expression RARROW type_specifier .)
    FOR             reduce using rule 78 (expression -> expression RARROW type_specifier .)
    WHILE           reduce using rule 78 (expression -> expression RARROW type_specifier .)
    SWITCH          reduce using rule 78 (expression -> expression RARROW type_specifier .)
    BREAK           reduce using rule 78 (expression -> expression RARROW type_specifier .)
    IDENTIFIER      reduce using rule 78 (expression -> expression RARROW type_specifier .)
    INTEGER_LITERAL reduce using rule 78 (expression -> expression RARROW type_specifier .)
    FLOAT_LITERAL   reduce using rule 78 (expression -> expression RARROW type_specifier .)
    TRUE            reduce using rule 78 (expression -> expression RARROW type_specifier .)
    FALSE           reduce using rule 78 (expression -> expression RARROW type_specifier .)
    STRING_LITERAL  reduce using rule 78 (expression -> expression RARROW type_specifier .)
    LPAREN          reduce using rule 78 (expression -> expression RARROW type_specifier .)
    RETURN          reduce using rule 78 (expression -> expression RARROW type_specifier .)
    INT             reduce using rule 78 (expression -> expression RARROW type_specifier .)
    FLOAT           reduce using rule 78 (expression -> expression RARROW type_specifier .)
    BOOL            reduce using rule 78 (expression -> expression RARROW type_specifier .)
    STR             reduce using rule 78 (expression -> expression RARROW type_specifier .)
    UNTYPED         reduce using rule 78 (expression -> expression RARROW type_specifier .)
    VOID            reduce using rule 78 (expression -> expression RARROW type_specifier .)
    LIST            reduce using rule 78 (expression -> expression RARROW type_specifier .)
    $end            reduce using rule 78 (expression -> expression RARROW type_specifier .)
    RBRACE          reduce using rule 78 (expression -> expression RARROW type_specifier .)
    CASE            reduce using rule 78 (expression -> expression RARROW type_specifier .)
    DEFAULT         reduce using rule 78 (expression -> expression RARROW type_specifier .)
    AS              reduce using rule 78 (expression -> expression RARROW type_specifier .)
    RPAREN          reduce using rule 78 (expression -> expression RARROW type_specifier .)
    COMMA           reduce using rule 78 (expression -> expression RARROW type_specifier .)
    RBRACKET        reduce using rule 78 (expression -> expression RARROW type_specifier .)
    LBRACE          reduce using rule 78 (expression -> expression RARROW type_specifier .)
    COLON           reduce using rule 78 (expression -> expression RARROW type_specifier .)


state 87

    (23) statement -> IMPORT expression AS . IDENTIFIER

    IDENTIFIER      shift and go to state 109


state 88

    (53) assignment -> IDENTIFIER EQUALS expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMI            reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    IMPORT          reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    IF              reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    FOR             reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    WHILE           reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    SWITCH          reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    BREAK           reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    IDENTIFIER      reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    INTEGER_LITERAL reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    FLOAT_LITERAL   reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    TRUE            reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    FALSE           reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    STRING_LITERAL  reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    LPAREN          reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    RETURN          reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    INT             reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    FLOAT           reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    BOOL            reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    STR             reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    UNTYPED         reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    VOID            reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    LIST            reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    $end            reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    RBRACE          reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    CASE            reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    DEFAULT         reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    RPAREN          reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .) ]
  ! MINUS           [ reduce using rule 53 (assignment -> IDENTIFIER EQUALS expression .) ]


state 89

    (54) assignment -> IDENTIFIER double_operation expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMI            reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    IMPORT          reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    IF              reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    FOR             reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    WHILE           reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    SWITCH          reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    BREAK           reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    IDENTIFIER      reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    INTEGER_LITERAL reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    FLOAT_LITERAL   reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    TRUE            reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    FALSE           reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    STRING_LITERAL  reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    LPAREN          reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    RETURN          reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    INT             reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    FLOAT           reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    BOOL            reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    STR             reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    UNTYPED         reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    VOID            reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    LIST            reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    $end            reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    RBRACE          reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    CASE            reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    DEFAULT         reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    RPAREN          reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .) ]
  ! MINUS           [ reduce using rule 54 (assignment -> IDENTIFIER double_operation expression .) ]


state 90

    (11) expression -> IDENTIFIER LPAREN arguments . RPAREN

    RPAREN          shift and go to state 110


state 91

    (13) arguments -> expression . COMMA arguments
    (14) arguments -> expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    COMMA           shift and go to state 111
    RPAREN          reduce using rule 14 (arguments -> expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 92

    (12) expression -> IDENTIFIER PIPE IDENTIFIER . LPAREN arguments RPAREN

    LPAREN          shift and go to state 112


state 93

    (44) expression -> IDENTIFIER AT expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for RARROW resolved as shift
    SEMI            reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    IMPORT          reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    IF              reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    FOR             reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    WHILE           reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    SWITCH          reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    BREAK           reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    IDENTIFIER      reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    INTEGER_LITERAL reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    FLOAT_LITERAL   reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    TRUE            reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    FALSE           reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    STRING_LITERAL  reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    LPAREN          reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    RETURN          reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    INT             reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    FLOAT           reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    BOOL            reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    STR             reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    UNTYPED         reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    VOID            reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    LIST            reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    $end            reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    RBRACE          reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    CASE            reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    DEFAULT         reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    AS              reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    RPAREN          reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    COMMA           reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    RBRACKET        reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    LBRACE          reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    COLON           reduce using rule 44 (expression -> IDENTIFIER AT expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 44 (expression -> IDENTIFIER AT expression .) ]
  ! PLUS            [ reduce using rule 44 (expression -> IDENTIFIER AT expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> IDENTIFIER AT expression .) ]
  ! MUL             [ reduce using rule 44 (expression -> IDENTIFIER AT expression .) ]
  ! DIV             [ reduce using rule 44 (expression -> IDENTIFIER AT expression .) ]
  ! GT              [ reduce using rule 44 (expression -> IDENTIFIER AT expression .) ]
  ! LT              [ reduce using rule 44 (expression -> IDENTIFIER AT expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> IDENTIFIER AT expression .) ]
  ! GE              [ reduce using rule 44 (expression -> IDENTIFIER AT expression .) ]
  ! LE              [ reduce using rule 44 (expression -> IDENTIFIER AT expression .) ]
  ! NE              [ reduce using rule 44 (expression -> IDENTIFIER AT expression .) ]
  ! RARROW          [ reduce using rule 44 (expression -> IDENTIFIER AT expression .) ]


state 94

    (41) list_operation -> IDENTIFIER LBRACKET expression . RBRACKET EQUALS expression
    (42) list_operation -> IDENTIFIER LBRACKET expression . RBRACKET LARROW expression
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    RBRACKET        shift and go to state 113
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 95

    (43) list_operation -> IDENTIFIER MINUSEQ LBRACKET . expression RBRACKET
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 114

state 96

    (25) statement -> IF LPAREN expression . RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> IF LPAREN expression . RPAREN LBRACE statements RBRACE
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    RPAREN          shift and go to state 115
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 97

    (77) expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    RARROW          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    INTEGER_LITERAL reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    FLOAT_LITERAL   reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    INT             reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    BOOL            reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    STR             reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    UNTYPED         reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    VOID            reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    LIST            reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    AS              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 77 (expression -> LPAREN expression RPAREN .)


state 98

    (27) statement -> FOR LPAREN statement . SEMI expression SEMI statement RPAREN LBRACE statements RBRACE

    SEMI            shift and go to state 116


state 99

    (28) statement -> FOR LPAREN type_specifier . IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (45) declaration -> type_specifier . IDENTIFIER EQUALS expression
    (6) function_declaration -> type_specifier . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> type_specifier . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 117


state 100

    (45) declaration -> type_specifier IDENTIFIER EQUALS . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 118

state 101

    (6) function_declaration -> type_specifier IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> type_specifier IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (8) parameters -> . type_specifier IDENTIFIER COMMA parameters
    (9) parameters -> . type_specifier IDENTIFIER
    (10) parameters -> .
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    RPAREN          reduce using rule 10 (parameters -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    type_specifier                 shift and go to state 119
    parameters                     shift and go to state 120

state 102

    (29) statement -> WHILE LPAREN expression . RPAREN LBRACE statements RBRACE
    (30) statement -> WHILE LPAREN expression . RPAREN COLON expression LBRACE statements RBRACE
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    RPAREN          shift and go to state 121
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 103

    (31) statement -> SWITCH LPAREN expression . RPAREN LBRACE case_statements RBRACE
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    RPAREN          shift and go to state 122
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 104

    (36) expression -> LBRACKET elements RBRACKET .

    LBRACKET        reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    PLUS            reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    MINUS           reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    MUL             reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    DIV             reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    GT              reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    LT              reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    EQ              reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    GE              reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    LE              reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    NE              reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    RARROW          reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    SEMI            reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    IMPORT          reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    IF              reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    FOR             reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    WHILE           reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    SWITCH          reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    BREAK           reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    IDENTIFIER      reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    INTEGER_LITERAL reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    FLOAT_LITERAL   reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    TRUE            reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    FALSE           reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    STRING_LITERAL  reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    LPAREN          reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    RETURN          reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    INT             reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    FLOAT           reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    BOOL            reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    STR             reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    UNTYPED         reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    VOID            reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    LIST            reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    $end            reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    RBRACE          reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    CASE            reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    DEFAULT         reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    AS              reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    RPAREN          reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    COMMA           reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    RBRACKET        reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    LBRACE          reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)
    COLON           reduce using rule 36 (expression -> LBRACKET elements RBRACKET .)


state 105

    (38) elements -> expression COMMA . elements
    (38) elements -> . expression COMMA elements
    (39) elements -> . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 69
    elements                       shift and go to state 123

state 106

    (16) return_statement -> RETURN expression SEMI .

    SEMI            reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    IMPORT          reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    IF              reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    IDENTIFIER      reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    LBRACKET        reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    INTEGER_LITERAL reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    FLOAT_LITERAL   reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    TRUE            reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    FALSE           reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    STRING_LITERAL  reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    INT             reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    BOOL            reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    STR             reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    UNTYPED         reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    VOID            reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    LIST            reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    $end            reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    RBRACE          reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 16 (return_statement -> RETURN expression SEMI .)
    RPAREN          reduce using rule 16 (return_statement -> RETURN expression SEMI .)


state 107

    (52) type_specifier -> LIST LT type_specifier . GT

    GT              shift and go to state 124


state 108

    (40) expression -> expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    MUL             reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    DIV             reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    RARROW          reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    IMPORT          reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    IF              reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    FOR             reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    SWITCH          reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    INTEGER_LITERAL reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    FLOAT_LITERAL   reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    STRING_LITERAL  reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    INT             reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    BOOL            reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    STR             reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    UNTYPED         reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    VOID            reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    LIST            reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    $end            reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    CASE            reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    DEFAULT         reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    AS              reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 40 (expression -> expression LBRACKET expression RBRACKET .)


state 109

    (23) statement -> IMPORT expression AS IDENTIFIER .

    SEMI            reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    IMPORT          reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    IF              reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    FOR             reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    WHILE           reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    SWITCH          reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    BREAK           reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    IDENTIFIER      reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    LBRACKET        reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    INTEGER_LITERAL reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    MINUS           reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    FLOAT_LITERAL   reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    TRUE            reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    FALSE           reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    STRING_LITERAL  reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    LPAREN          reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    RETURN          reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    INT             reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    FLOAT           reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    BOOL            reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    STR             reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    UNTYPED         reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    VOID            reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    LIST            reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    $end            reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    RBRACE          reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    CASE            reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    DEFAULT         reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)
    RPAREN          reduce using rule 23 (statement -> IMPORT expression AS IDENTIFIER .)


state 110

    (11) expression -> IDENTIFIER LPAREN arguments RPAREN .

    LBRACKET        reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    PLUS            reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    MINUS           reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    MUL             reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    DIV             reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    GT              reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    LT              reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    EQ              reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    GE              reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    LE              reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    NE              reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    RARROW          reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    SEMI            reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    IMPORT          reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    IF              reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    FOR             reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    WHILE           reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    SWITCH          reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    BREAK           reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    IDENTIFIER      reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    INTEGER_LITERAL reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    FLOAT_LITERAL   reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    TRUE            reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    FALSE           reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    STRING_LITERAL  reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    RETURN          reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    INT             reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    FLOAT           reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    BOOL            reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    STR             reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    UNTYPED         reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    VOID            reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    LIST            reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    $end            reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    CASE            reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    DEFAULT         reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    AS              reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    COMMA           reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    RBRACKET        reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    LBRACE          reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)
    COLON           reduce using rule 11 (expression -> IDENTIFIER LPAREN arguments RPAREN .)


state 111

    (13) arguments -> expression COMMA . arguments
    (13) arguments -> . expression COMMA arguments
    (14) arguments -> . expression
    (15) arguments -> .
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    RPAREN          reduce using rule 15 (arguments -> .)
    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 91
    arguments                      shift and go to state 125

state 112

    (12) expression -> IDENTIFIER PIPE IDENTIFIER LPAREN . arguments RPAREN
    (13) arguments -> . expression COMMA arguments
    (14) arguments -> . expression
    (15) arguments -> .
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    RPAREN          reduce using rule 15 (arguments -> .)
    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    arguments                      shift and go to state 126
    expression                     shift and go to state 91

state 113

    (41) list_operation -> IDENTIFIER LBRACKET expression RBRACKET . EQUALS expression
    (42) list_operation -> IDENTIFIER LBRACKET expression RBRACKET . LARROW expression

    EQUALS          shift and go to state 127
    LARROW          shift and go to state 128


state 114

    (43) list_operation -> IDENTIFIER MINUSEQ LBRACKET expression . RBRACKET
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    RBRACKET        shift and go to state 129
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 115

    (25) statement -> IF LPAREN expression RPAREN . LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> IF LPAREN expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 130


state 116

    (27) statement -> FOR LPAREN statement SEMI . expression SEMI statement RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 131

state 117

    (28) statement -> FOR LPAREN type_specifier IDENTIFIER . IN expression RPAREN LBRACE statements RBRACE
    (45) declaration -> type_specifier IDENTIFIER . EQUALS expression
    (6) function_declaration -> type_specifier IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> type_specifier IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    IN              shift and go to state 132
    EQUALS          shift and go to state 100
    LPAREN          shift and go to state 101


state 118

    (45) declaration -> type_specifier IDENTIFIER EQUALS expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMI            reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    IMPORT          reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    IF              reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    FOR             reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    WHILE           reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    SWITCH          reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    BREAK           reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    IDENTIFIER      reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    INTEGER_LITERAL reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    FLOAT_LITERAL   reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    TRUE            reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    FALSE           reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    STRING_LITERAL  reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    LPAREN          reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    RETURN          reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    INT             reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    FLOAT           reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    BOOL            reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    STR             reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    UNTYPED         reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    VOID            reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    LIST            reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    $end            reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    RBRACE          reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    CASE            reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    DEFAULT         reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    RPAREN          reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .) ]
  ! MINUS           [ reduce using rule 45 (declaration -> type_specifier IDENTIFIER EQUALS expression .) ]


state 119

    (8) parameters -> type_specifier . IDENTIFIER COMMA parameters
    (9) parameters -> type_specifier . IDENTIFIER

    IDENTIFIER      shift and go to state 133


state 120

    (6) function_declaration -> type_specifier IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> type_specifier IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 134


state 121

    (29) statement -> WHILE LPAREN expression RPAREN . LBRACE statements RBRACE
    (30) statement -> WHILE LPAREN expression RPAREN . COLON expression LBRACE statements RBRACE

    LBRACE          shift and go to state 135
    COLON           shift and go to state 136


state 122

    (31) statement -> SWITCH LPAREN expression RPAREN . LBRACE case_statements RBRACE

    LBRACE          shift and go to state 137


state 123

    (38) elements -> expression COMMA elements .

    RBRACKET        reduce using rule 38 (elements -> expression COMMA elements .)


state 124

    (52) type_specifier -> LIST LT type_specifier GT .

    IDENTIFIER      reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    LBRACKET        reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    PLUS            reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    MINUS           reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    MUL             reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    DIV             reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    GT              reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    LT              reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    EQ              reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    GE              reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    LE              reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    NE              reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    RARROW          reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    SEMI            reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    IMPORT          reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    IF              reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    FOR             reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    WHILE           reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    SWITCH          reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    BREAK           reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    INTEGER_LITERAL reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    FLOAT_LITERAL   reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    TRUE            reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    FALSE           reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    STRING_LITERAL  reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    LPAREN          reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    RETURN          reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    INT             reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    FLOAT           reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    BOOL            reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    STR             reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    UNTYPED         reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    VOID            reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    LIST            reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    $end            reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    RBRACE          reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    CASE            reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    DEFAULT         reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    AS              reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    RPAREN          reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    COMMA           reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    RBRACKET        reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    LBRACE          reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)
    COLON           reduce using rule 52 (type_specifier -> LIST LT type_specifier GT .)


state 125

    (13) arguments -> expression COMMA arguments .

    RPAREN          reduce using rule 13 (arguments -> expression COMMA arguments .)


state 126

    (12) expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments . RPAREN

    RPAREN          shift and go to state 138


state 127

    (41) list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 139

state 128

    (42) list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 140

state 129

    (43) list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .

    SEMI            reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    IMPORT          reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    IF              reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    FOR             reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    SWITCH          reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    INTEGER_LITERAL reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    FLOAT_LITERAL   reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    STRING_LITERAL  reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    INT             reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    BOOL            reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    STR             reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    UNTYPED         reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    VOID            reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    LIST            reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    $end            reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    CASE            reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    DEFAULT         reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 43 (list_operation -> IDENTIFIER MINUSEQ LBRACKET expression RBRACKET .)


state 130

    (25) statement -> IF LPAREN expression RPAREN LBRACE . statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> IF LPAREN expression RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement SEMI statements
    (3) statements -> . statement SEMI
    (4) statements -> . statement statements
    (5) statements -> . statement
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    expression                     shift and go to state 7
    statements                     shift and go to state 141
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9
    type_specifier                 shift and go to state 15

state 131

    (27) statement -> FOR LPAREN statement SEMI expression . SEMI statement RPAREN LBRACE statements RBRACE
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    SEMI            shift and go to state 142
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 132

    (28) statement -> FOR LPAREN type_specifier IDENTIFIER IN . expression RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 143

state 133

    (8) parameters -> type_specifier IDENTIFIER . COMMA parameters
    (9) parameters -> type_specifier IDENTIFIER .

    COMMA           shift and go to state 144
    RPAREN          reduce using rule 9 (parameters -> type_specifier IDENTIFIER .)


state 134

    (6) function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 145


state 135

    (29) statement -> WHILE LPAREN expression RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement SEMI statements
    (3) statements -> . statement SEMI
    (4) statements -> . statement statements
    (5) statements -> . statement
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    expression                     shift and go to state 7
    statements                     shift and go to state 146
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9
    type_specifier                 shift and go to state 15

state 136

    (30) statement -> WHILE LPAREN expression RPAREN COLON . expression LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 147

state 137

    (31) statement -> SWITCH LPAREN expression RPAREN LBRACE . case_statements RBRACE
    (32) case_statements -> . CASE expression COLON statements case_statements
    (33) case_statements -> . DEFAULT COLON statements
    (34) case_statements -> .

    CASE            shift and go to state 149
    DEFAULT         shift and go to state 150
    RBRACE          reduce using rule 34 (case_statements -> .)

    case_statements                shift and go to state 148

state 138

    (12) expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .

    LBRACKET        reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    PLUS            reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    MINUS           reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    MUL             reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    DIV             reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    GT              reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    LT              reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    EQ              reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    GE              reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    LE              reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    NE              reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    RARROW          reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    SEMI            reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    IMPORT          reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    IF              reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    FOR             reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    WHILE           reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    SWITCH          reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    BREAK           reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    IDENTIFIER      reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    INTEGER_LITERAL reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    FLOAT_LITERAL   reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    TRUE            reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    FALSE           reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    STRING_LITERAL  reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    RETURN          reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    INT             reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    FLOAT           reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    BOOL            reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    STR             reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    UNTYPED         reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    VOID            reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    LIST            reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    $end            reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    CASE            reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    DEFAULT         reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    AS              reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    COMMA           reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    RBRACKET        reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    LBRACE          reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)
    COLON           reduce using rule 12 (expression -> IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN .)


state 139

    (41) list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMI            reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    IMPORT          reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    IF              reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    FOR             reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    WHILE           reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    SWITCH          reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    BREAK           reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    IDENTIFIER      reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    INTEGER_LITERAL reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    FLOAT_LITERAL   reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    TRUE            reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    FALSE           reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    STRING_LITERAL  reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    LPAREN          reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    RETURN          reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    INT             reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    FLOAT           reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    BOOL            reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    STR             reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    UNTYPED         reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    VOID            reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    LIST            reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    $end            reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    RBRACE          reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    CASE            reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    DEFAULT         reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    RPAREN          reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .) ]
  ! MINUS           [ reduce using rule 41 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET EQUALS expression .) ]


state 140

    (42) list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMI            reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    IMPORT          reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    IF              reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    FOR             reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    WHILE           reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    SWITCH          reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    BREAK           reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    IDENTIFIER      reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    INTEGER_LITERAL reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    FLOAT_LITERAL   reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    TRUE            reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    FALSE           reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    STRING_LITERAL  reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    LPAREN          reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    RETURN          reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    INT             reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    FLOAT           reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    BOOL            reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    STR             reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    UNTYPED         reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    VOID            reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    LIST            reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    $end            reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    RBRACE          reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    CASE            reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    DEFAULT         reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    RPAREN          reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .) ]
  ! MINUS           [ reduce using rule 42 (list_operation -> IDENTIFIER LBRACKET expression RBRACKET LARROW expression .) ]


state 141

    (25) statement -> IF LPAREN expression RPAREN LBRACE statements . RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> IF LPAREN expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 151


state 142

    (27) statement -> FOR LPAREN statement SEMI expression SEMI . statement RPAREN LBRACE statements RBRACE
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    statement                      shift and go to state 152
    expression                     shift and go to state 7
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9
    type_specifier                 shift and go to state 15

state 143

    (28) statement -> FOR LPAREN type_specifier IDENTIFIER IN expression . RPAREN LBRACE statements RBRACE
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    RPAREN          shift and go to state 153
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 144

    (8) parameters -> type_specifier IDENTIFIER COMMA . parameters
    (8) parameters -> . type_specifier IDENTIFIER COMMA parameters
    (9) parameters -> . type_specifier IDENTIFIER
    (10) parameters -> .
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    RPAREN          reduce using rule 10 (parameters -> .)
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    type_specifier                 shift and go to state 119
    parameters                     shift and go to state 154

state 145

    (6) function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE EQUALS expression
    (7) function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement SEMI statements
    (3) statements -> . statement SEMI
    (4) statements -> . statement statements
    (5) statements -> . statement
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    type_specifier                 shift and go to state 15
    statements                     shift and go to state 155
    expression                     shift and go to state 7
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9

state 146

    (29) statement -> WHILE LPAREN expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 156


state 147

    (30) statement -> WHILE LPAREN expression RPAREN COLON expression . LBRACE statements RBRACE
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    LBRACE          shift and go to state 157
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 148

    (31) statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements . RBRACE

    RBRACE          shift and go to state 158


state 149

    (32) case_statements -> CASE . expression COLON statements case_statements
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 159

state 150

    (33) case_statements -> DEFAULT . COLON statements

    COLON           shift and go to state 160


state 151

    (25) statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE . ELSE LBRACE statements RBRACE
    (26) statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .

    ELSE            shift and go to state 161
    SEMI            reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    IMPORT          reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    SWITCH          reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    INTEGER_LITERAL reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    MINUS           reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    FLOAT_LITERAL   reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    TRUE            reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    FALSE           reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    STRING_LITERAL  reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    BOOL            reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    UNTYPED         reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    LIST            reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    CASE            reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    RPAREN          reduce using rule 26 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)


state 152

    (27) statement -> FOR LPAREN statement SEMI expression SEMI statement . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 162


state 153

    (28) statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 163


state 154

    (8) parameters -> type_specifier IDENTIFIER COMMA parameters .

    RPAREN          reduce using rule 8 (parameters -> type_specifier IDENTIFIER COMMA parameters .)


state 155

    (6) function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE EQUALS expression
    (7) function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 164


state 156

    (29) statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .

    SEMI            reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IMPORT          reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    SWITCH          reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    INTEGER_LITERAL reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    MINUS           reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FLOAT_LITERAL   reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    TRUE            reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FALSE           reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    STRING_LITERAL  reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    BOOL            reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    UNTYPED         reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    LIST            reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    CASE            reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    RPAREN          reduce using rule 29 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)


state 157

    (30) statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE . statements RBRACE
    (2) statements -> . statement SEMI statements
    (3) statements -> . statement SEMI
    (4) statements -> . statement statements
    (5) statements -> . statement
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    expression                     shift and go to state 7
    statements                     shift and go to state 165
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9
    type_specifier                 shift and go to state 15

state 158

    (31) statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .

    SEMI            reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    IMPORT          reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    IF              reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    FOR             reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    WHILE           reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    SWITCH          reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    BREAK           reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    IDENTIFIER      reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    LBRACKET        reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    INTEGER_LITERAL reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    MINUS           reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    FLOAT_LITERAL   reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    TRUE            reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    FALSE           reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    STRING_LITERAL  reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    LPAREN          reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    RETURN          reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    INT             reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    FLOAT           reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    BOOL            reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    STR             reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    UNTYPED         reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    VOID            reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    LIST            reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    $end            reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    RBRACE          reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    CASE            reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    DEFAULT         reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)
    RPAREN          reduce using rule 31 (statement -> SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE .)


state 159

    (32) case_statements -> CASE expression . COLON statements case_statements
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

    COLON           shift and go to state 166
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47


state 160

    (33) case_statements -> DEFAULT COLON . statements
    (2) statements -> . statement SEMI statements
    (3) statements -> . statement SEMI
    (4) statements -> . statement statements
    (5) statements -> . statement
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    statements                     shift and go to state 167
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    expression                     shift and go to state 7
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9
    type_specifier                 shift and go to state 15

state 161

    (25) statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE . LBRACE statements RBRACE

    LBRACE          shift and go to state 168


state 162

    (27) statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 169


state 163

    (28) statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement SEMI statements
    (3) statements -> . statement SEMI
    (4) statements -> . statement statements
    (5) statements -> . statement
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    type_specifier                 shift and go to state 15
    expression                     shift and go to state 7
    statements                     shift and go to state 170
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9

state 164

    (6) function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE . EQUALS expression
    (7) function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    EQUALS          shift and go to state 171
    SEMI            reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IMPORT          reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    SWITCH          reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    INTEGER_LITERAL reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    MINUS           reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FLOAT_LITERAL   reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    TRUE            reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FALSE           reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    STRING_LITERAL  reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    BOOL            reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    UNTYPED         reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    LIST            reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CASE            reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RPAREN          reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 165

    (30) statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements . RBRACE

    RBRACE          shift and go to state 172


state 166

    (32) case_statements -> CASE expression COLON . statements case_statements
    (2) statements -> . statement SEMI statements
    (3) statements -> . statement SEMI
    (4) statements -> . statement statements
    (5) statements -> . statement
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    expression                     shift and go to state 7
    statements                     shift and go to state 173
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9
    type_specifier                 shift and go to state 15

state 167

    (33) case_statements -> DEFAULT COLON statements .

    RBRACE          reduce using rule 33 (case_statements -> DEFAULT COLON statements .)


state 168

    (25) statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE . statements RBRACE
    (2) statements -> . statement SEMI statements
    (3) statements -> . statement SEMI
    (4) statements -> . statement statements
    (5) statements -> . statement
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    expression                     shift and go to state 7
    statements                     shift and go to state 174
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9
    type_specifier                 shift and go to state 15

state 169

    (27) statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement SEMI statements
    (3) statements -> . statement SEMI
    (4) statements -> . statement statements
    (5) statements -> . statement
    (17) statement -> . declaration
    (18) statement -> . assignment
    (19) statement -> . function_declaration
    (20) statement -> . expression
    (21) statement -> . list_operation
    (22) statement -> . return_statement
    (23) statement -> . IMPORT expression AS IDENTIFIER
    (24) statement -> . IMPORT expression
    (25) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (27) statement -> . FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE
    (28) statement -> . FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE
    (29) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) statement -> . WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE
    (31) statement -> . SWITCH LPAREN expression RPAREN LBRACE case_statements RBRACE
    (35) statement -> . BREAK SEMI
    (45) declaration -> . type_specifier IDENTIFIER EQUALS expression
    (53) assignment -> . IDENTIFIER EQUALS expression
    (54) assignment -> . IDENTIFIER double_operation expression
    (6) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression
    (7) function_declaration -> . type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier
    (41) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET EQUALS expression
    (42) list_operation -> . IDENTIFIER LBRACKET expression RBRACKET LARROW expression
    (43) list_operation -> . IDENTIFIER MINUSEQ LBRACKET expression RBRACKET
    (16) return_statement -> . RETURN expression SEMI
    (46) type_specifier -> . INT
    (47) type_specifier -> . FLOAT
    (48) type_specifier -> . BOOL
    (49) type_specifier -> . STR
    (50) type_specifier -> . UNTYPED
    (51) type_specifier -> . VOID
    (52) type_specifier -> . LIST LT type_specifier GT

    IMPORT          shift and go to state 10
    IF              shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    SWITCH          shift and go to state 17
    BREAK           shift and go to state 18
    IDENTIFIER      shift and go to state 11
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13
    RETURN          shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    BOOL            shift and go to state 29
    STR             shift and go to state 30
    UNTYPED         shift and go to state 31
    VOID            shift and go to state 32
    LIST            shift and go to state 33

    statement                      shift and go to state 3
    expression                     shift and go to state 7
    statements                     shift and go to state 175
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    list_operation                 shift and go to state 8
    return_statement               shift and go to state 9
    type_specifier                 shift and go to state 15

state 170

    (28) statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 176


state 171

    (6) function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS . expression
    (11) expression -> . IDENTIFIER LPAREN arguments RPAREN
    (12) expression -> . IDENTIFIER PIPE IDENTIFIER LPAREN arguments RPAREN
    (36) expression -> . LBRACKET elements RBRACKET
    (37) expression -> . LBRACKET RBRACKET
    (40) expression -> . expression LBRACKET expression RBRACKET
    (44) expression -> . IDENTIFIER AT expression
    (59) expression -> . expression PLUS expression
    (60) expression -> . expression MINUS expression
    (61) expression -> . expression MUL expression
    (62) expression -> . expression DIV expression
    (63) expression -> . INTEGER_LITERAL
    (64) expression -> . MINUS INTEGER_LITERAL
    (65) expression -> . FLOAT_LITERAL
    (66) expression -> . MINUS FLOAT_LITERAL
    (67) expression -> . TRUE
    (68) expression -> . FALSE
    (69) expression -> . STRING_LITERAL
    (70) expression -> . IDENTIFIER
    (71) expression -> . expression GT expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression EQ expression
    (74) expression -> . expression GE expression
    (75) expression -> . expression LE expression
    (76) expression -> . expression NE expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . expression RARROW type_specifier

    IDENTIFIER      shift and go to state 49
    LBRACKET        shift and go to state 19
    INTEGER_LITERAL shift and go to state 21
    MINUS           shift and go to state 20
    FLOAT_LITERAL   shift and go to state 22
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24
    STRING_LITERAL  shift and go to state 25
    LPAREN          shift and go to state 13

    expression                     shift and go to state 177

state 172

    (30) statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .

    SEMI            reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    IMPORT          reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    IF              reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    FOR             reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    WHILE           reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    SWITCH          reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    BREAK           reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    INTEGER_LITERAL reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    MINUS           reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    FLOAT_LITERAL   reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    TRUE            reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    FALSE           reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    STRING_LITERAL  reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    LPAREN          reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    RETURN          reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    INT             reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    FLOAT           reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    BOOL            reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    STR             reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    UNTYPED         reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    VOID            reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    LIST            reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    $end            reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    RBRACE          reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    CASE            reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)
    RPAREN          reduce using rule 30 (statement -> WHILE LPAREN expression RPAREN COLON expression LBRACE statements RBRACE .)


state 173

    (32) case_statements -> CASE expression COLON statements . case_statements
    (32) case_statements -> . CASE expression COLON statements case_statements
    (33) case_statements -> . DEFAULT COLON statements
    (34) case_statements -> .

    CASE            shift and go to state 149
    DEFAULT         shift and go to state 150
    RBRACE          reduce using rule 34 (case_statements -> .)

    case_statements                shift and go to state 178

state 174

    (25) statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements . RBRACE

    RBRACE          shift and go to state 179


state 175

    (27) statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 180


state 176

    (28) statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .

    SEMI            reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    IMPORT          reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    SWITCH          reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    INTEGER_LITERAL reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    MINUS           reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    FLOAT_LITERAL   reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    TRUE            reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    FALSE           reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    STRING_LITERAL  reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    BOOL            reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    UNTYPED         reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    LIST            reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    CASE            reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)
    RPAREN          reduce using rule 28 (statement -> FOR LPAREN type_specifier IDENTIFIER IN expression RPAREN LBRACE statements RBRACE .)


state 177

    (6) function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .
    (40) expression -> expression . LBRACKET expression RBRACKET
    (59) expression -> expression . PLUS expression
    (60) expression -> expression . MINUS expression
    (61) expression -> expression . MUL expression
    (62) expression -> expression . DIV expression
    (71) expression -> expression . GT expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . EQ expression
    (74) expression -> expression . GE expression
    (75) expression -> expression . LE expression
    (76) expression -> expression . NE expression
    (78) expression -> expression . RARROW type_specifier

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMI            reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    IMPORT          reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    IF              reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    FOR             reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    WHILE           reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    SWITCH          reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    BREAK           reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    IDENTIFIER      reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    INTEGER_LITERAL reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    FLOAT_LITERAL   reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    TRUE            reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    FALSE           reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    STRING_LITERAL  reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    LPAREN          reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    RETURN          reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    INT             reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    FLOAT           reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    BOOL            reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    STR             reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    UNTYPED         reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    VOID            reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    LIST            reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    $end            reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    RBRACE          reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    CASE            reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    DEFAULT         reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    RPAREN          reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .)
    LBRACKET        shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    GT              shift and go to state 41
    LT              shift and go to state 42
    EQ              shift and go to state 43
    GE              shift and go to state 44
    LE              shift and go to state 45
    NE              shift and go to state 46
    RARROW          shift and go to state 47

  ! LBRACKET        [ reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .) ]
  ! MINUS           [ reduce using rule 6 (function_declaration -> type_specifier IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE EQUALS expression .) ]


state 178

    (32) case_statements -> CASE expression COLON statements case_statements .

    RBRACE          reduce using rule 32 (case_statements -> CASE expression COLON statements case_statements .)


state 179

    (25) statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .

    SEMI            reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    IMPORT          reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    IF              reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    FOR             reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    WHILE           reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    SWITCH          reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    BREAK           reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    INTEGER_LITERAL reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    MINUS           reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    FLOAT_LITERAL   reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    TRUE            reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    FALSE           reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    STRING_LITERAL  reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    LPAREN          reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    RETURN          reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    INT             reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    FLOAT           reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    BOOL            reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    STR             reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    UNTYPED         reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    VOID            reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    LIST            reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    $end            reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    RBRACE          reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    CASE            reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    RPAREN          reduce using rule 25 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)


state 180

    (27) statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .

    SEMI            reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    IMPORT          reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    SWITCH          reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    INTEGER_LITERAL reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    MINUS           reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    FLOAT_LITERAL   reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    TRUE            reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    FALSE           reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    STRING_LITERAL  reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    BOOL            reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    UNTYPED         reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    VOID            reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    LIST            reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    CASE            reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)
    RPAREN          reduce using rule 27 (statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE statements RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 7 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 7 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 11 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 11 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 49 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 56 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MUL in state 76 resolved as shift
WARNING: shift/reduce conflict for DIV in state 76 resolved as shift
WARNING: shift/reduce conflict for GT in state 76 resolved as shift
WARNING: shift/reduce conflict for LT in state 76 resolved as shift
WARNING: shift/reduce conflict for EQ in state 76 resolved as shift
WARNING: shift/reduce conflict for GE in state 76 resolved as shift
WARNING: shift/reduce conflict for LE in state 76 resolved as shift
WARNING: shift/reduce conflict for NE in state 76 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 76 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MUL in state 77 resolved as shift
WARNING: shift/reduce conflict for DIV in state 77 resolved as shift
WARNING: shift/reduce conflict for GT in state 77 resolved as shift
WARNING: shift/reduce conflict for LT in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for GE in state 77 resolved as shift
WARNING: shift/reduce conflict for LE in state 77 resolved as shift
WARNING: shift/reduce conflict for NE in state 77 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 77 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MUL in state 78 resolved as shift
WARNING: shift/reduce conflict for DIV in state 78 resolved as shift
WARNING: shift/reduce conflict for GT in state 78 resolved as shift
WARNING: shift/reduce conflict for LT in state 78 resolved as shift
WARNING: shift/reduce conflict for EQ in state 78 resolved as shift
WARNING: shift/reduce conflict for GE in state 78 resolved as shift
WARNING: shift/reduce conflict for LE in state 78 resolved as shift
WARNING: shift/reduce conflict for NE in state 78 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 78 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MUL in state 79 resolved as shift
WARNING: shift/reduce conflict for DIV in state 79 resolved as shift
WARNING: shift/reduce conflict for GT in state 79 resolved as shift
WARNING: shift/reduce conflict for LT in state 79 resolved as shift
WARNING: shift/reduce conflict for EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for GE in state 79 resolved as shift
WARNING: shift/reduce conflict for LE in state 79 resolved as shift
WARNING: shift/reduce conflict for NE in state 79 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 79 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MUL in state 80 resolved as shift
WARNING: shift/reduce conflict for DIV in state 80 resolved as shift
WARNING: shift/reduce conflict for GT in state 80 resolved as shift
WARNING: shift/reduce conflict for LT in state 80 resolved as shift
WARNING: shift/reduce conflict for EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for GE in state 80 resolved as shift
WARNING: shift/reduce conflict for LE in state 80 resolved as shift
WARNING: shift/reduce conflict for NE in state 80 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 80 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MUL in state 81 resolved as shift
WARNING: shift/reduce conflict for DIV in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 81 resolved as shift
WARNING: shift/reduce conflict for EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for GE in state 81 resolved as shift
WARNING: shift/reduce conflict for LE in state 81 resolved as shift
WARNING: shift/reduce conflict for NE in state 81 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 81 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MUL in state 82 resolved as shift
WARNING: shift/reduce conflict for DIV in state 82 resolved as shift
WARNING: shift/reduce conflict for GT in state 82 resolved as shift
WARNING: shift/reduce conflict for LT in state 82 resolved as shift
WARNING: shift/reduce conflict for EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for GE in state 82 resolved as shift
WARNING: shift/reduce conflict for LE in state 82 resolved as shift
WARNING: shift/reduce conflict for NE in state 82 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 82 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MUL in state 83 resolved as shift
WARNING: shift/reduce conflict for DIV in state 83 resolved as shift
WARNING: shift/reduce conflict for GT in state 83 resolved as shift
WARNING: shift/reduce conflict for LT in state 83 resolved as shift
WARNING: shift/reduce conflict for EQ in state 83 resolved as shift
WARNING: shift/reduce conflict for GE in state 83 resolved as shift
WARNING: shift/reduce conflict for LE in state 83 resolved as shift
WARNING: shift/reduce conflict for NE in state 83 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 83 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MUL in state 84 resolved as shift
WARNING: shift/reduce conflict for DIV in state 84 resolved as shift
WARNING: shift/reduce conflict for GT in state 84 resolved as shift
WARNING: shift/reduce conflict for LT in state 84 resolved as shift
WARNING: shift/reduce conflict for EQ in state 84 resolved as shift
WARNING: shift/reduce conflict for GE in state 84 resolved as shift
WARNING: shift/reduce conflict for LE in state 84 resolved as shift
WARNING: shift/reduce conflict for NE in state 84 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 84 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MUL in state 85 resolved as shift
WARNING: shift/reduce conflict for DIV in state 85 resolved as shift
WARNING: shift/reduce conflict for GT in state 85 resolved as shift
WARNING: shift/reduce conflict for LT in state 85 resolved as shift
WARNING: shift/reduce conflict for EQ in state 85 resolved as shift
WARNING: shift/reduce conflict for GE in state 85 resolved as shift
WARNING: shift/reduce conflict for LE in state 85 resolved as shift
WARNING: shift/reduce conflict for NE in state 85 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 85 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MUL in state 93 resolved as shift
WARNING: shift/reduce conflict for DIV in state 93 resolved as shift
WARNING: shift/reduce conflict for GT in state 93 resolved as shift
WARNING: shift/reduce conflict for LT in state 93 resolved as shift
WARNING: shift/reduce conflict for EQ in state 93 resolved as shift
WARNING: shift/reduce conflict for GE in state 93 resolved as shift
WARNING: shift/reduce conflict for LE in state 93 resolved as shift
WARNING: shift/reduce conflict for NE in state 93 resolved as shift
WARNING: shift/reduce conflict for RARROW in state 93 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 177 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 177 resolved as shift
